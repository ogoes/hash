// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_server.proto

#include "client_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_client_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Player_client_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_client_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_client_5fserver_2eproto;
namespace server_client {
class PlayerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Player> _instance;
} _Player_default_instance_;
class OperationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Operation> _instance;
} _Operation_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response> _instance;
} _Response_default_instance_;
class LogInSignUpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogInSignUp> _instance;
} _LogInSignUp_default_instance_;
class LogInSignUpResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogInSignUpResponse> _instance;
} _LogInSignUpResponse_default_instance_;
class RankingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Ranking> _instance;
} _Ranking_default_instance_;
class PlayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Play> _instance;
} _Play_default_instance_;
class GameResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GameResult> _instance;
} _GameResult_default_instance_;
class KeepDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Keep> _instance;
} _Keep_default_instance_;
class ChallengeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChallengeRequest> _instance;
} _ChallengeRequest_default_instance_;
class ChallengeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChallengeResponse> _instance;
} _ChallengeResponse_default_instance_;
class ViewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<View> _instance;
} _View_default_instance_;
class OnlinePlayersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OnlinePlayers> _instance;
} _OnlinePlayers_default_instance_;
class ChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Change> _instance;
} _Change_default_instance_;
class ChangesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChangesResponse> _instance;
} _ChangesResponse_default_instance_;
}  // namespace server_client
static void InitDefaultsscc_info_ChallengeRequest_client_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_client::_ChallengeRequest_default_instance_;
    new (ptr) ::server_client::ChallengeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_client::ChallengeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChallengeRequest_client_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChallengeRequest_client_5fserver_2eproto}, {
      &scc_info_Player_client_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_ChallengeResponse_client_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_client::_ChallengeResponse_default_instance_;
    new (ptr) ::server_client::ChallengeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_client::ChallengeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ChallengeResponse_client_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ChallengeResponse_client_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_Change_client_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_client::_Change_default_instance_;
    new (ptr) ::server_client::Change();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_client::Change::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Change_client_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Change_client_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_ChangesResponse_client_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_client::_ChangesResponse_default_instance_;
    new (ptr) ::server_client::ChangesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_client::ChangesResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ChangesResponse_client_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ChangesResponse_client_5fserver_2eproto}, {
      &scc_info_Response_client_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_GameResult_client_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_client::_GameResult_default_instance_;
    new (ptr) ::server_client::GameResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_client::GameResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GameResult_client_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GameResult_client_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_Keep_client_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_client::_Keep_default_instance_;
    new (ptr) ::server_client::Keep();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_client::Keep::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Keep_client_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Keep_client_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_LogInSignUp_client_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_client::_LogInSignUp_default_instance_;
    new (ptr) ::server_client::LogInSignUp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_client::LogInSignUp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogInSignUp_client_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogInSignUp_client_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_LogInSignUpResponse_client_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_client::_LogInSignUpResponse_default_instance_;
    new (ptr) ::server_client::LogInSignUpResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_client::LogInSignUpResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LogInSignUpResponse_client_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LogInSignUpResponse_client_5fserver_2eproto}, {
      &scc_info_Response_client_5fserver_2eproto.base,
      &scc_info_Player_client_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_OnlinePlayers_client_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_client::_OnlinePlayers_default_instance_;
    new (ptr) ::server_client::OnlinePlayers();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_client::OnlinePlayers::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_OnlinePlayers_client_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_OnlinePlayers_client_5fserver_2eproto}, {
      &scc_info_Response_client_5fserver_2eproto.base,
      &scc_info_Player_client_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_Operation_client_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_client::_Operation_default_instance_;
    new (ptr) ::server_client::Operation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_client::Operation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Operation_client_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Operation_client_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_Play_client_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_client::_Play_default_instance_;
    new (ptr) ::server_client::Play();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_client::Play::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Play_client_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Play_client_5fserver_2eproto}, {
      &scc_info_Player_client_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_Player_client_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_client::_Player_default_instance_;
    new (ptr) ::server_client::Player();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_client::Player::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Player_client_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Player_client_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_Ranking_client_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_client::_Ranking_default_instance_;
    new (ptr) ::server_client::Ranking();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_client::Ranking::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Ranking_client_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Ranking_client_5fserver_2eproto}, {
      &scc_info_Response_client_5fserver_2eproto.base,
      &scc_info_Player_client_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_Response_client_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_client::_Response_default_instance_;
    new (ptr) ::server_client::Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_client::Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Response_client_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Response_client_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_View_client_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::server_client::_View_default_instance_;
    new (ptr) ::server_client::View();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::server_client::View::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_View_client_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_View_client_5fserver_2eproto}, {
      &scc_info_Response_client_5fserver_2eproto.base,
      &scc_info_Player_client_5fserver_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_client_5fserver_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_client_5fserver_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_client_5fserver_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_client_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_client::Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_client::Player, id_),
  PROTOBUF_FIELD_OFFSET(::server_client::Player, username_),
  PROTOBUF_FIELD_OFFSET(::server_client::Player, password_),
  PROTOBUF_FIELD_OFFSET(::server_client::Player, wins_),
  PROTOBUF_FIELD_OFFSET(::server_client::Player, tieds_),
  PROTOBUF_FIELD_OFFSET(::server_client::Player, lost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_client::Operation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_client::Operation, operation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_client::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_client::Response, status_code_),
  PROTOBUF_FIELD_OFFSET(::server_client::Response, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_client::LogInSignUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_client::LogInSignUp, username_),
  PROTOBUF_FIELD_OFFSET(::server_client::LogInSignUp, password_),
  PROTOBUF_FIELD_OFFSET(::server_client::LogInSignUp, request_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_client::LogInSignUpResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_client::LogInSignUpResponse, status_),
  PROTOBUF_FIELD_OFFSET(::server_client::LogInSignUpResponse, player_),
  PROTOBUF_FIELD_OFFSET(::server_client::LogInSignUpResponse, already_logged_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_client::Ranking, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_client::Ranking, status_),
  PROTOBUF_FIELD_OFFSET(::server_client::Ranking, players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_client::Play, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_client::Play, request_type_),
  PROTOBUF_FIELD_OFFSET(::server_client::Play, challended_player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_client::GameResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_client::GameResult, result_),
  PROTOBUF_FIELD_OFFSET(::server_client::GameResult, winner_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_client::Keep, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_client::Keep, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_client::ChallengeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_client::ChallengeRequest, challender_player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_client::ChallengeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_client::ChallengeResponse, answer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_client::View, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_client::View, status_),
  PROTOBUF_FIELD_OFFSET(::server_client::View, player_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_client::OnlinePlayers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_client::OnlinePlayers, status_),
  PROTOBUF_FIELD_OFFSET(::server_client::OnlinePlayers, players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_client::Change, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_client::Change, username_),
  PROTOBUF_FIELD_OFFSET(::server_client::Change, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::server_client::ChangesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::server_client::ChangesResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::server_client::Player)},
  { 11, -1, sizeof(::server_client::Operation)},
  { 17, -1, sizeof(::server_client::Response)},
  { 24, -1, sizeof(::server_client::LogInSignUp)},
  { 32, -1, sizeof(::server_client::LogInSignUpResponse)},
  { 40, -1, sizeof(::server_client::Ranking)},
  { 47, -1, sizeof(::server_client::Play)},
  { 54, -1, sizeof(::server_client::GameResult)},
  { 61, -1, sizeof(::server_client::Keep)},
  { 67, -1, sizeof(::server_client::ChallengeRequest)},
  { 73, -1, sizeof(::server_client::ChallengeResponse)},
  { 79, -1, sizeof(::server_client::View)},
  { 86, -1, sizeof(::server_client::OnlinePlayers)},
  { 93, -1, sizeof(::server_client::Change)},
  { 100, -1, sizeof(::server_client::ChangesResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_client::_Player_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_client::_Operation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_client::_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_client::_LogInSignUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_client::_LogInSignUpResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_client::_Ranking_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_client::_Play_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_client::_GameResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_client::_Keep_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_client::_ChallengeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_client::_ChallengeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_client::_View_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_client::_OnlinePlayers_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_client::_Change_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::server_client::_ChangesResponse_default_instance_),
};

const char descriptor_table_protodef_client_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023client_server.proto\022\rserver_client\"c\n\006"
  "Player\022\n\n\002id\030\001 \001(\004\022\020\n\010username\030\002 \001(\t\022\020\n\010"
  "password\030\003 \001(\t\022\014\n\004wins\030\004 \001(\r\022\r\n\005tieds\030\005 "
  "\001(\r\022\014\n\004lost\030\006 \001(\r\"\216\001\n\tOperation\0223\n\topera"
  "tion\030\001 \001(\0162 .server_client.Operation.Req"
  "uest\"L\n\007Request\022\013\n\007RANKING\020\000\022\010\n\004PLAY\020\001\022\n"
  "\n\006ONLINE\020\002\022\010\n\004VIEW\020\003\022\n\n\006CHANGE\020\004\022\010\n\004EXIT"
  "\020\005\"0\n\010Response\022\023\n\013status_code\030\001 \001(\005\022\017\n\007m"
  "essage\030\002 \001(\t\"\207\001\n\013LogInSignUp\022\020\n\010username"
  "\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\0225\n\014request_type"
  "\030\003 \001(\0162\037.server_client.LogInSignUp.Type\""
  "\035\n\004Type\022\n\n\006SIGNUP\020\000\022\t\n\005LOGIN\020\001\"}\n\023LogInS"
  "ignUpResponse\022\'\n\006status\030\001 \001(\0132\027.server_c"
  "lient.Response\022%\n\006player\030\002 \001(\0132\025.server_"
  "client.Player\022\026\n\016already_logged\030\003 \001(\010\"Z\n"
  "\007Ranking\022\'\n\006status\030\001 \001(\0132\027.server_client"
  ".Response\022&\n\007players\030\002 \003(\0132\025.server_clie"
  "nt.Player\"\211\001\n\004Play\022.\n\014request_type\030\001 \001(\016"
  "2\030.server_client.Play.Type\0220\n\021challended"
  "_player\030\002 \001(\0132\025.server_client.Player\"\037\n\004"
  "Type\022\010\n\004WAIT\020\000\022\r\n\tCHALLENGE\020\001\"\270\001\n\nGameRe"
  "sult\0220\n\006result\030\001 \001(\0162 .server_client.Gam"
  "eResult.Result\0220\n\006winner\030\002 \001(\0162 .server_"
  "client.GameResult.Winner\"\"\n\006Result\022\016\n\nHA"
  "S_WINNER\020\000\022\010\n\004TIED\020\001\"\"\n\006Winner\022\013\n\007PLAYER"
  "1\020\000\022\013\n\007PLAYER2\020\001\"N\n\004Keep\022&\n\004type\030\001 \001(\0162\030"
  ".server_client.Keep.Type\"\036\n\004Type\022\007\n\003ACK\020"
  "\000\022\r\n\tCHALLENGE\020\001\"D\n\020ChallengeRequest\0220\n\021"
  "challender_player\030\001 \001(\0132\025.server_client."
  "Player\"l\n\021ChallengeResponse\0227\n\006answer\030\001 "
  "\001(\0162\'.server_client.ChallengeResponse.An"
  "swer\"\036\n\006Answer\022\n\n\006ACCEPT\020\000\022\010\n\004DENY\020\001\"V\n\004"
  "View\022\'\n\006status\030\001 \001(\0132\027.server_client.Res"
  "ponse\022%\n\006player\030\002 \001(\0132\025.server_client.Pl"
  "ayer\"`\n\rOnlinePlayers\022\'\n\006status\030\001 \001(\0132\027."
  "server_client.Response\022&\n\007players\030\002 \003(\0132"
  "\025.server_client.Player\",\n\006Change\022\020\n\010user"
  "name\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\":\n\017ChangesR"
  "esponse\022\'\n\006status\030\001 \001(\0132\027.server_client."
  "Responseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_client_5fserver_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_client_5fserver_2eproto_sccs[15] = {
  &scc_info_ChallengeRequest_client_5fserver_2eproto.base,
  &scc_info_ChallengeResponse_client_5fserver_2eproto.base,
  &scc_info_Change_client_5fserver_2eproto.base,
  &scc_info_ChangesResponse_client_5fserver_2eproto.base,
  &scc_info_GameResult_client_5fserver_2eproto.base,
  &scc_info_Keep_client_5fserver_2eproto.base,
  &scc_info_LogInSignUp_client_5fserver_2eproto.base,
  &scc_info_LogInSignUpResponse_client_5fserver_2eproto.base,
  &scc_info_OnlinePlayers_client_5fserver_2eproto.base,
  &scc_info_Operation_client_5fserver_2eproto.base,
  &scc_info_Play_client_5fserver_2eproto.base,
  &scc_info_Player_client_5fserver_2eproto.base,
  &scc_info_Ranking_client_5fserver_2eproto.base,
  &scc_info_Response_client_5fserver_2eproto.base,
  &scc_info_View_client_5fserver_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_client_5fserver_2eproto_once;
static bool descriptor_table_client_5fserver_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fserver_2eproto = {
  &descriptor_table_client_5fserver_2eproto_initialized, descriptor_table_protodef_client_5fserver_2eproto, "client_server.proto", 1576,
  &descriptor_table_client_5fserver_2eproto_once, descriptor_table_client_5fserver_2eproto_sccs, descriptor_table_client_5fserver_2eproto_deps, 15, 0,
  schemas, file_default_instances, TableStruct_client_5fserver_2eproto::offsets,
  file_level_metadata_client_5fserver_2eproto, 15, file_level_enum_descriptors_client_5fserver_2eproto, file_level_service_descriptors_client_5fserver_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_client_5fserver_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_client_5fserver_2eproto), true);
namespace server_client {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operation_Request_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fserver_2eproto);
  return file_level_enum_descriptors_client_5fserver_2eproto[0];
}
bool Operation_Request_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Operation_Request Operation::RANKING;
constexpr Operation_Request Operation::PLAY;
constexpr Operation_Request Operation::ONLINE;
constexpr Operation_Request Operation::VIEW;
constexpr Operation_Request Operation::CHANGE;
constexpr Operation_Request Operation::EXIT;
constexpr Operation_Request Operation::Request_MIN;
constexpr Operation_Request Operation::Request_MAX;
constexpr int Operation::Request_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogInSignUp_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fserver_2eproto);
  return file_level_enum_descriptors_client_5fserver_2eproto[1];
}
bool LogInSignUp_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LogInSignUp_Type LogInSignUp::SIGNUP;
constexpr LogInSignUp_Type LogInSignUp::LOGIN;
constexpr LogInSignUp_Type LogInSignUp::Type_MIN;
constexpr LogInSignUp_Type LogInSignUp::Type_MAX;
constexpr int LogInSignUp::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Play_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fserver_2eproto);
  return file_level_enum_descriptors_client_5fserver_2eproto[2];
}
bool Play_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Play_Type Play::WAIT;
constexpr Play_Type Play::CHALLENGE;
constexpr Play_Type Play::Type_MIN;
constexpr Play_Type Play::Type_MAX;
constexpr int Play::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fserver_2eproto);
  return file_level_enum_descriptors_client_5fserver_2eproto[3];
}
bool GameResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GameResult_Result GameResult::HAS_WINNER;
constexpr GameResult_Result GameResult::TIED;
constexpr GameResult_Result GameResult::Result_MIN;
constexpr GameResult_Result GameResult::Result_MAX;
constexpr int GameResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameResult_Winner_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fserver_2eproto);
  return file_level_enum_descriptors_client_5fserver_2eproto[4];
}
bool GameResult_Winner_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GameResult_Winner GameResult::PLAYER1;
constexpr GameResult_Winner GameResult::PLAYER2;
constexpr GameResult_Winner GameResult::Winner_MIN;
constexpr GameResult_Winner GameResult::Winner_MAX;
constexpr int GameResult::Winner_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Keep_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fserver_2eproto);
  return file_level_enum_descriptors_client_5fserver_2eproto[5];
}
bool Keep_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Keep_Type Keep::ACK;
constexpr Keep_Type Keep::CHALLENGE;
constexpr Keep_Type Keep::Type_MIN;
constexpr Keep_Type Keep::Type_MAX;
constexpr int Keep::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChallengeResponse_Answer_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fserver_2eproto);
  return file_level_enum_descriptors_client_5fserver_2eproto[6];
}
bool ChallengeResponse_Answer_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ChallengeResponse_Answer ChallengeResponse::ACCEPT;
constexpr ChallengeResponse_Answer ChallengeResponse::DENY;
constexpr ChallengeResponse_Answer ChallengeResponse::Answer_MIN;
constexpr ChallengeResponse_Answer ChallengeResponse::Answer_MAX;
constexpr int ChallengeResponse::Answer_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Player::InitAsDefaultInstance() {
}
class Player::_Internal {
 public:
};

Player::Player()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_client.Player)
}
Player::Player(const Player& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&lost_) -
    reinterpret_cast<char*>(&id_)) + sizeof(lost_));
  // @@protoc_insertion_point(copy_constructor:server_client.Player)
}

void Player::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Player_client_5fserver_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lost_) -
      reinterpret_cast<char*>(&id_)) + sizeof(lost_));
}

Player::~Player() {
  // @@protoc_insertion_point(destructor:server_client.Player)
  SharedDtor();
}

void Player::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Player& Player::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Player_client_5fserver_2eproto.base);
  return *internal_default_instance();
}


void Player::Clear() {
// @@protoc_insertion_point(message_clear_start:server_client.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lost_) -
      reinterpret_cast<char*>(&id_)) + sizeof(lost_));
  _internal_metadata_.Clear();
}

const char* Player::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_username(), ptr, ctx, "server_client.Player.username");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_password(), ptr, ctx, "server_client.Player.password");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 wins = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          wins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 tieds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          tieds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lost = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          lost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Player::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_client.Player)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string username = 2;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server_client.Player.username");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_username(), target);
  }

  // string password = 3;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server_client.Player.password");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_password(), target);
  }

  // uint32 wins = 4;
  if (this->wins() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_wins(), target);
  }

  // uint32 tieds = 5;
  if (this->tieds() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_tieds(), target);
  }

  // uint32 lost = 6;
  if (this->lost() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_lost(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_client.Player)
  return target;
}

size_t Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_client.Player)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 2;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 3;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  // uint32 wins = 4;
  if (this->wins() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wins());
  }

  // uint32 tieds = 5;
  if (this->tieds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tieds());
  }

  // uint32 lost = 6;
  if (this->lost() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lost());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Player::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_client.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const Player* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_client.Player)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_client.Player)
    MergeFrom(*source);
  }
}

void Player::MergeFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_client.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.wins() != 0) {
    _internal_set_wins(from._internal_wins());
  }
  if (from.tieds() != 0) {
    _internal_set_tieds(from._internal_tieds());
  }
  if (from.lost() != 0) {
    _internal_set_lost(from._internal_lost());
  }
}

void Player::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_client.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Player::CopyFrom(const Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_client.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player::IsInitialized() const {
  return true;
}

void Player::InternalSwap(Player* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(wins_, other->wins_);
  swap(tieds_, other->tieds_);
  swap(lost_, other->lost_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Player::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Operation::InitAsDefaultInstance() {
}
class Operation::_Internal {
 public:
};

Operation::Operation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_client.Operation)
}
Operation::Operation(const Operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operation_ = from.operation_;
  // @@protoc_insertion_point(copy_constructor:server_client.Operation)
}

void Operation::SharedCtor() {
  operation_ = 0;
}

Operation::~Operation() {
  // @@protoc_insertion_point(destructor:server_client.Operation)
  SharedDtor();
}

void Operation::SharedDtor() {
}

void Operation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Operation& Operation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Operation_client_5fserver_2eproto.base);
  return *internal_default_instance();
}


void Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:server_client.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operation_ = 0;
  _internal_metadata_.Clear();
}

const char* Operation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .server_client.Operation.Request operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_operation(static_cast<::server_client::Operation_Request>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Operation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_client.Operation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server_client.Operation.Request operation = 1;
  if (this->operation() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_client.Operation)
  return target;
}

size_t Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_client.Operation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .server_client.Operation.Request operation = 1;
  if (this->operation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_operation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Operation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_client.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  const Operation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Operation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_client.Operation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_client.Operation)
    MergeFrom(*source);
  }
}

void Operation::MergeFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_client.Operation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.operation() != 0) {
    _internal_set_operation(from._internal_operation());
  }
}

void Operation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_client.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Operation::CopyFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_client.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  return true;
}

void Operation::InternalSwap(Operation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(operation_, other->operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Operation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Response::InitAsDefaultInstance() {
}
class Response::_Internal {
 public:
};

Response::Response()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_client.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  status_code_ = from.status_code_;
  // @@protoc_insertion_point(copy_constructor:server_client.Response)
}

void Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_client_5fserver_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_code_ = 0;
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:server_client.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response& Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_client_5fserver_2eproto.base);
  return *internal_default_instance();
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:server_client.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_code_ = 0;
  _internal_metadata_.Clear();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 status_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_message(), ptr, ctx, "server_client.Response.message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_client.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status_code = 1;
  if (this->status_code() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_status_code(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server_client.Response.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_client.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_client.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int32 status_code = 1;
  if (this->status_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_client.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_client.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_client.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_client.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {

    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  if (from.status_code() != 0) {
    _internal_set_status_code(from._internal_status_code());
  }
}

void Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_client.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_client.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_code_, other->status_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogInSignUp::InitAsDefaultInstance() {
}
class LogInSignUp::_Internal {
 public:
};

LogInSignUp::LogInSignUp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_client.LogInSignUp)
}
LogInSignUp::LogInSignUp(const LogInSignUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  request_type_ = from.request_type_;
  // @@protoc_insertion_point(copy_constructor:server_client.LogInSignUp)
}

void LogInSignUp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogInSignUp_client_5fserver_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_type_ = 0;
}

LogInSignUp::~LogInSignUp() {
  // @@protoc_insertion_point(destructor:server_client.LogInSignUp)
  SharedDtor();
}

void LogInSignUp::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogInSignUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogInSignUp& LogInSignUp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogInSignUp_client_5fserver_2eproto.base);
  return *internal_default_instance();
}


void LogInSignUp::Clear() {
// @@protoc_insertion_point(message_clear_start:server_client.LogInSignUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_type_ = 0;
  _internal_metadata_.Clear();
}

const char* LogInSignUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_username(), ptr, ctx, "server_client.LogInSignUp.username");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_password(), ptr, ctx, "server_client.LogInSignUp.password");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .server_client.LogInSignUp.Type request_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_request_type(static_cast<::server_client::LogInSignUp_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogInSignUp::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_client.LogInSignUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server_client.LogInSignUp.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server_client.LogInSignUp.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  // .server_client.LogInSignUp.Type request_type = 3;
  if (this->request_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_request_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_client.LogInSignUp)
  return target;
}

size_t LogInSignUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_client.LogInSignUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // .server_client.LogInSignUp.Type request_type = 3;
  if (this->request_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_request_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogInSignUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_client.LogInSignUp)
  GOOGLE_DCHECK_NE(&from, this);
  const LogInSignUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogInSignUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_client.LogInSignUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_client.LogInSignUp)
    MergeFrom(*source);
  }
}

void LogInSignUp::MergeFrom(const LogInSignUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_client.LogInSignUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  if (from.request_type() != 0) {
    _internal_set_request_type(from._internal_request_type());
  }
}

void LogInSignUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_client.LogInSignUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogInSignUp::CopyFrom(const LogInSignUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_client.LogInSignUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogInSignUp::IsInitialized() const {
  return true;
}

void LogInSignUp::InternalSwap(LogInSignUp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(request_type_, other->request_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogInSignUp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogInSignUpResponse::InitAsDefaultInstance() {
  ::server_client::_LogInSignUpResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::server_client::Response*>(
      ::server_client::Response::internal_default_instance());
  ::server_client::_LogInSignUpResponse_default_instance_._instance.get_mutable()->player_ = const_cast< ::server_client::Player*>(
      ::server_client::Player::internal_default_instance());
}
class LogInSignUpResponse::_Internal {
 public:
  static const ::server_client::Response& status(const LogInSignUpResponse* msg);
  static const ::server_client::Player& player(const LogInSignUpResponse* msg);
};

const ::server_client::Response&
LogInSignUpResponse::_Internal::status(const LogInSignUpResponse* msg) {
  return *msg->status_;
}
const ::server_client::Player&
LogInSignUpResponse::_Internal::player(const LogInSignUpResponse* msg) {
  return *msg->player_;
}
LogInSignUpResponse::LogInSignUpResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_client.LogInSignUpResponse)
}
LogInSignUpResponse::LogInSignUpResponse(const LogInSignUpResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::server_client::Response(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_player()) {
    player_ = new ::server_client::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  already_logged_ = from.already_logged_;
  // @@protoc_insertion_point(copy_constructor:server_client.LogInSignUpResponse)
}

void LogInSignUpResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogInSignUpResponse_client_5fserver_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&already_logged_) -
      reinterpret_cast<char*>(&status_)) + sizeof(already_logged_));
}

LogInSignUpResponse::~LogInSignUpResponse() {
  // @@protoc_insertion_point(destructor:server_client.LogInSignUpResponse)
  SharedDtor();
}

void LogInSignUpResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete player_;
}

void LogInSignUpResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogInSignUpResponse& LogInSignUpResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogInSignUpResponse_client_5fserver_2eproto.base);
  return *internal_default_instance();
}


void LogInSignUpResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:server_client.LogInSignUpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  already_logged_ = false;
  _internal_metadata_.Clear();
}

const char* LogInSignUpResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .server_client.Response status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .server_client.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool already_logged = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          already_logged_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogInSignUpResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_client.LogInSignUpResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server_client.Response status = 1;
  if (this->has_status()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target, stream);
  }

  // .server_client.Player player = 2;
  if (this->has_player()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::player(this), target, stream);
  }

  // bool already_logged = 3;
  if (this->already_logged() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_already_logged(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_client.LogInSignUpResponse)
  return target;
}

size_t LogInSignUpResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_client.LogInSignUpResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .server_client.Response status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .server_client.Player player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  // bool already_logged = 3;
  if (this->already_logged() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogInSignUpResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_client.LogInSignUpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LogInSignUpResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogInSignUpResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_client.LogInSignUpResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_client.LogInSignUpResponse)
    MergeFrom(*source);
  }
}

void LogInSignUpResponse::MergeFrom(const LogInSignUpResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_client.LogInSignUpResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::server_client::Response::MergeFrom(from._internal_status());
  }
  if (from.has_player()) {
    _internal_mutable_player()->::server_client::Player::MergeFrom(from._internal_player());
  }
  if (from.already_logged() != 0) {
    _internal_set_already_logged(from._internal_already_logged());
  }
}

void LogInSignUpResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_client.LogInSignUpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogInSignUpResponse::CopyFrom(const LogInSignUpResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_client.LogInSignUpResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogInSignUpResponse::IsInitialized() const {
  return true;
}

void LogInSignUpResponse::InternalSwap(LogInSignUpResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(player_, other->player_);
  swap(already_logged_, other->already_logged_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogInSignUpResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Ranking::InitAsDefaultInstance() {
  ::server_client::_Ranking_default_instance_._instance.get_mutable()->status_ = const_cast< ::server_client::Response*>(
      ::server_client::Response::internal_default_instance());
}
class Ranking::_Internal {
 public:
  static const ::server_client::Response& status(const Ranking* msg);
};

const ::server_client::Response&
Ranking::_Internal::status(const Ranking* msg) {
  return *msg->status_;
}
Ranking::Ranking()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_client.Ranking)
}
Ranking::Ranking(const Ranking& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::server_client::Response(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:server_client.Ranking)
}

void Ranking::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Ranking_client_5fserver_2eproto.base);
  status_ = nullptr;
}

Ranking::~Ranking() {
  // @@protoc_insertion_point(destructor:server_client.Ranking)
  SharedDtor();
}

void Ranking::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void Ranking::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Ranking& Ranking::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Ranking_client_5fserver_2eproto.base);
  return *internal_default_instance();
}


void Ranking::Clear() {
// @@protoc_insertion_point(message_clear_start:server_client.Ranking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Ranking::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .server_client.Response status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .server_client.Player players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ranking::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_client.Ranking)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server_client.Response status = 1;
  if (this->has_status()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target, stream);
  }

  // repeated .server_client.Player players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_client.Ranking)
  return target;
}

size_t Ranking::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_client.Ranking)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .server_client.Player players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .server_client.Response status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ranking::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_client.Ranking)
  GOOGLE_DCHECK_NE(&from, this);
  const Ranking* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ranking>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_client.Ranking)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_client.Ranking)
    MergeFrom(*source);
  }
}

void Ranking::MergeFrom(const Ranking& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_client.Ranking)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.has_status()) {
    _internal_mutable_status()->::server_client::Response::MergeFrom(from._internal_status());
  }
}

void Ranking::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_client.Ranking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ranking::CopyFrom(const Ranking& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_client.Ranking)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ranking::IsInitialized() const {
  return true;
}

void Ranking::InternalSwap(Ranking* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ranking::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Play::InitAsDefaultInstance() {
  ::server_client::_Play_default_instance_._instance.get_mutable()->challended_player_ = const_cast< ::server_client::Player*>(
      ::server_client::Player::internal_default_instance());
}
class Play::_Internal {
 public:
  static const ::server_client::Player& challended_player(const Play* msg);
};

const ::server_client::Player&
Play::_Internal::challended_player(const Play* msg) {
  return *msg->challended_player_;
}
Play::Play()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_client.Play)
}
Play::Play(const Play& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_challended_player()) {
    challended_player_ = new ::server_client::Player(*from.challended_player_);
  } else {
    challended_player_ = nullptr;
  }
  request_type_ = from.request_type_;
  // @@protoc_insertion_point(copy_constructor:server_client.Play)
}

void Play::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Play_client_5fserver_2eproto.base);
  ::memset(&challended_player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&request_type_) -
      reinterpret_cast<char*>(&challended_player_)) + sizeof(request_type_));
}

Play::~Play() {
  // @@protoc_insertion_point(destructor:server_client.Play)
  SharedDtor();
}

void Play::SharedDtor() {
  if (this != internal_default_instance()) delete challended_player_;
}

void Play::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Play& Play::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Play_client_5fserver_2eproto.base);
  return *internal_default_instance();
}


void Play::Clear() {
// @@protoc_insertion_point(message_clear_start:server_client.Play)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && challended_player_ != nullptr) {
    delete challended_player_;
  }
  challended_player_ = nullptr;
  request_type_ = 0;
  _internal_metadata_.Clear();
}

const char* Play::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .server_client.Play.Type request_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_request_type(static_cast<::server_client::Play_Type>(val));
        } else goto handle_unusual;
        continue;
      // .server_client.Player challended_player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_challended_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Play::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_client.Play)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server_client.Play.Type request_type = 1;
  if (this->request_type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_request_type(), target);
  }

  // .server_client.Player challended_player = 2;
  if (this->has_challended_player()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::challended_player(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_client.Play)
  return target;
}

size_t Play::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_client.Play)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .server_client.Player challended_player = 2;
  if (this->has_challended_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *challended_player_);
  }

  // .server_client.Play.Type request_type = 1;
  if (this->request_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_request_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Play::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_client.Play)
  GOOGLE_DCHECK_NE(&from, this);
  const Play* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Play>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_client.Play)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_client.Play)
    MergeFrom(*source);
  }
}

void Play::MergeFrom(const Play& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_client.Play)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_challended_player()) {
    _internal_mutable_challended_player()->::server_client::Player::MergeFrom(from._internal_challended_player());
  }
  if (from.request_type() != 0) {
    _internal_set_request_type(from._internal_request_type());
  }
}

void Play::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_client.Play)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Play::CopyFrom(const Play& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_client.Play)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Play::IsInitialized() const {
  return true;
}

void Play::InternalSwap(Play* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(challended_player_, other->challended_player_);
  swap(request_type_, other->request_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Play::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GameResult::InitAsDefaultInstance() {
}
class GameResult::_Internal {
 public:
};

GameResult::GameResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_client.GameResult)
}
GameResult::GameResult(const GameResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&result_, &from.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&winner_) -
    reinterpret_cast<char*>(&result_)) + sizeof(winner_));
  // @@protoc_insertion_point(copy_constructor:server_client.GameResult)
}

void GameResult::SharedCtor() {
  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&winner_) -
      reinterpret_cast<char*>(&result_)) + sizeof(winner_));
}

GameResult::~GameResult() {
  // @@protoc_insertion_point(destructor:server_client.GameResult)
  SharedDtor();
}

void GameResult::SharedDtor() {
}

void GameResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GameResult& GameResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GameResult_client_5fserver_2eproto.base);
  return *internal_default_instance();
}


void GameResult::Clear() {
// @@protoc_insertion_point(message_clear_start:server_client.GameResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&winner_) -
      reinterpret_cast<char*>(&result_)) + sizeof(winner_));
  _internal_metadata_.Clear();
}

const char* GameResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .server_client.GameResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::server_client::GameResult_Result>(val));
        } else goto handle_unusual;
        continue;
      // .server_client.GameResult.Winner winner = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_winner(static_cast<::server_client::GameResult_Winner>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GameResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_client.GameResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server_client.GameResult.Result result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_result(), target);
  }

  // .server_client.GameResult.Winner winner = 2;
  if (this->winner() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_winner(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_client.GameResult)
  return target;
}

size_t GameResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_client.GameResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .server_client.GameResult.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_result());
  }

  // .server_client.GameResult.Winner winner = 2;
  if (this->winner() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_winner());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GameResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_client.GameResult)
  GOOGLE_DCHECK_NE(&from, this);
  const GameResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GameResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_client.GameResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_client.GameResult)
    MergeFrom(*source);
  }
}

void GameResult::MergeFrom(const GameResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_client.GameResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result() != 0) {
    _internal_set_result(from._internal_result());
  }
  if (from.winner() != 0) {
    _internal_set_winner(from._internal_winner());
  }
}

void GameResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_client.GameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameResult::CopyFrom(const GameResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_client.GameResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameResult::IsInitialized() const {
  return true;
}

void GameResult::InternalSwap(GameResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(result_, other->result_);
  swap(winner_, other->winner_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GameResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Keep::InitAsDefaultInstance() {
}
class Keep::_Internal {
 public:
};

Keep::Keep()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_client.Keep)
}
Keep::Keep(const Keep& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:server_client.Keep)
}

void Keep::SharedCtor() {
  type_ = 0;
}

Keep::~Keep() {
  // @@protoc_insertion_point(destructor:server_client.Keep)
  SharedDtor();
}

void Keep::SharedDtor() {
}

void Keep::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Keep& Keep::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Keep_client_5fserver_2eproto.base);
  return *internal_default_instance();
}


void Keep::Clear() {
// @@protoc_insertion_point(message_clear_start:server_client.Keep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  _internal_metadata_.Clear();
}

const char* Keep::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .server_client.Keep.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::server_client::Keep_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Keep::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_client.Keep)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server_client.Keep.Type type = 1;
  if (this->type() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_client.Keep)
  return target;
}

size_t Keep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_client.Keep)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .server_client.Keep.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Keep::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_client.Keep)
  GOOGLE_DCHECK_NE(&from, this);
  const Keep* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Keep>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_client.Keep)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_client.Keep)
    MergeFrom(*source);
  }
}

void Keep::MergeFrom(const Keep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_client.Keep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Keep::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_client.Keep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Keep::CopyFrom(const Keep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_client.Keep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Keep::IsInitialized() const {
  return true;
}

void Keep::InternalSwap(Keep* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Keep::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChallengeRequest::InitAsDefaultInstance() {
  ::server_client::_ChallengeRequest_default_instance_._instance.get_mutable()->challender_player_ = const_cast< ::server_client::Player*>(
      ::server_client::Player::internal_default_instance());
}
class ChallengeRequest::_Internal {
 public:
  static const ::server_client::Player& challender_player(const ChallengeRequest* msg);
};

const ::server_client::Player&
ChallengeRequest::_Internal::challender_player(const ChallengeRequest* msg) {
  return *msg->challender_player_;
}
ChallengeRequest::ChallengeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_client.ChallengeRequest)
}
ChallengeRequest::ChallengeRequest(const ChallengeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_challender_player()) {
    challender_player_ = new ::server_client::Player(*from.challender_player_);
  } else {
    challender_player_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:server_client.ChallengeRequest)
}

void ChallengeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChallengeRequest_client_5fserver_2eproto.base);
  challender_player_ = nullptr;
}

ChallengeRequest::~ChallengeRequest() {
  // @@protoc_insertion_point(destructor:server_client.ChallengeRequest)
  SharedDtor();
}

void ChallengeRequest::SharedDtor() {
  if (this != internal_default_instance()) delete challender_player_;
}

void ChallengeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChallengeRequest& ChallengeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChallengeRequest_client_5fserver_2eproto.base);
  return *internal_default_instance();
}


void ChallengeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:server_client.ChallengeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && challender_player_ != nullptr) {
    delete challender_player_;
  }
  challender_player_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ChallengeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .server_client.Player challender_player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_challender_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChallengeRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_client.ChallengeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server_client.Player challender_player = 1;
  if (this->has_challender_player()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::challender_player(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_client.ChallengeRequest)
  return target;
}

size_t ChallengeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_client.ChallengeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .server_client.Player challender_player = 1;
  if (this->has_challender_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *challender_player_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChallengeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_client.ChallengeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ChallengeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChallengeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_client.ChallengeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_client.ChallengeRequest)
    MergeFrom(*source);
  }
}

void ChallengeRequest::MergeFrom(const ChallengeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_client.ChallengeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_challender_player()) {
    _internal_mutable_challender_player()->::server_client::Player::MergeFrom(from._internal_challender_player());
  }
}

void ChallengeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_client.ChallengeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeRequest::CopyFrom(const ChallengeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_client.ChallengeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeRequest::IsInitialized() const {
  return true;
}

void ChallengeRequest::InternalSwap(ChallengeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(challender_player_, other->challender_player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChallengeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChallengeResponse::InitAsDefaultInstance() {
}
class ChallengeResponse::_Internal {
 public:
};

ChallengeResponse::ChallengeResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_client.ChallengeResponse)
}
ChallengeResponse::ChallengeResponse(const ChallengeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  answer_ = from.answer_;
  // @@protoc_insertion_point(copy_constructor:server_client.ChallengeResponse)
}

void ChallengeResponse::SharedCtor() {
  answer_ = 0;
}

ChallengeResponse::~ChallengeResponse() {
  // @@protoc_insertion_point(destructor:server_client.ChallengeResponse)
  SharedDtor();
}

void ChallengeResponse::SharedDtor() {
}

void ChallengeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChallengeResponse& ChallengeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChallengeResponse_client_5fserver_2eproto.base);
  return *internal_default_instance();
}


void ChallengeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:server_client.ChallengeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  answer_ = 0;
  _internal_metadata_.Clear();
}

const char* ChallengeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .server_client.ChallengeResponse.Answer answer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_answer(static_cast<::server_client::ChallengeResponse_Answer>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChallengeResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_client.ChallengeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server_client.ChallengeResponse.Answer answer = 1;
  if (this->answer() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_answer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_client.ChallengeResponse)
  return target;
}

size_t ChallengeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_client.ChallengeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .server_client.ChallengeResponse.Answer answer = 1;
  if (this->answer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_answer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChallengeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_client.ChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChallengeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChallengeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_client.ChallengeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_client.ChallengeResponse)
    MergeFrom(*source);
  }
}

void ChallengeResponse::MergeFrom(const ChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_client.ChallengeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.answer() != 0) {
    _internal_set_answer(from._internal_answer());
  }
}

void ChallengeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_client.ChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeResponse::CopyFrom(const ChallengeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_client.ChallengeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeResponse::IsInitialized() const {
  return true;
}

void ChallengeResponse::InternalSwap(ChallengeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(answer_, other->answer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChallengeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void View::InitAsDefaultInstance() {
  ::server_client::_View_default_instance_._instance.get_mutable()->status_ = const_cast< ::server_client::Response*>(
      ::server_client::Response::internal_default_instance());
  ::server_client::_View_default_instance_._instance.get_mutable()->player_ = const_cast< ::server_client::Player*>(
      ::server_client::Player::internal_default_instance());
}
class View::_Internal {
 public:
  static const ::server_client::Response& status(const View* msg);
  static const ::server_client::Player& player(const View* msg);
};

const ::server_client::Response&
View::_Internal::status(const View* msg) {
  return *msg->status_;
}
const ::server_client::Player&
View::_Internal::player(const View* msg) {
  return *msg->player_;
}
View::View()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_client.View)
}
View::View(const View& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::server_client::Response(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_player()) {
    player_ = new ::server_client::Player(*from.player_);
  } else {
    player_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:server_client.View)
}

void View::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_View_client_5fserver_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&player_) -
      reinterpret_cast<char*>(&status_)) + sizeof(player_));
}

View::~View() {
  // @@protoc_insertion_point(destructor:server_client.View)
  SharedDtor();
}

void View::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete player_;
}

void View::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const View& View::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_View_client_5fserver_2eproto.base);
  return *internal_default_instance();
}


void View::Clear() {
// @@protoc_insertion_point(message_clear_start:server_client.View)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
  _internal_metadata_.Clear();
}

const char* View::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .server_client.Response status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .server_client.Player player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* View::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_client.View)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server_client.Response status = 1;
  if (this->has_status()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target, stream);
  }

  // .server_client.Player player = 2;
  if (this->has_player()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::player(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_client.View)
  return target;
}

size_t View::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_client.View)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .server_client.Response status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .server_client.Player player = 2;
  if (this->has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void View::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_client.View)
  GOOGLE_DCHECK_NE(&from, this);
  const View* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<View>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_client.View)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_client.View)
    MergeFrom(*source);
  }
}

void View::MergeFrom(const View& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_client.View)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::server_client::Response::MergeFrom(from._internal_status());
  }
  if (from.has_player()) {
    _internal_mutable_player()->::server_client::Player::MergeFrom(from._internal_player());
  }
}

void View::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_client.View)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void View::CopyFrom(const View& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_client.View)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool View::IsInitialized() const {
  return true;
}

void View::InternalSwap(View* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(player_, other->player_);
}

::PROTOBUF_NAMESPACE_ID::Metadata View::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OnlinePlayers::InitAsDefaultInstance() {
  ::server_client::_OnlinePlayers_default_instance_._instance.get_mutable()->status_ = const_cast< ::server_client::Response*>(
      ::server_client::Response::internal_default_instance());
}
class OnlinePlayers::_Internal {
 public:
  static const ::server_client::Response& status(const OnlinePlayers* msg);
};

const ::server_client::Response&
OnlinePlayers::_Internal::status(const OnlinePlayers* msg) {
  return *msg->status_;
}
OnlinePlayers::OnlinePlayers()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_client.OnlinePlayers)
}
OnlinePlayers::OnlinePlayers(const OnlinePlayers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::server_client::Response(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:server_client.OnlinePlayers)
}

void OnlinePlayers::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OnlinePlayers_client_5fserver_2eproto.base);
  status_ = nullptr;
}

OnlinePlayers::~OnlinePlayers() {
  // @@protoc_insertion_point(destructor:server_client.OnlinePlayers)
  SharedDtor();
}

void OnlinePlayers::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void OnlinePlayers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OnlinePlayers& OnlinePlayers::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OnlinePlayers_client_5fserver_2eproto.base);
  return *internal_default_instance();
}


void OnlinePlayers::Clear() {
// @@protoc_insertion_point(message_clear_start:server_client.OnlinePlayers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* OnlinePlayers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .server_client.Response status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .server_client.Player players = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OnlinePlayers::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_client.OnlinePlayers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server_client.Response status = 1;
  if (this->has_status()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target, stream);
  }

  // repeated .server_client.Player players = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_players_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_players(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_client.OnlinePlayers)
  return target;
}

size_t OnlinePlayers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_client.OnlinePlayers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .server_client.Player players = 2;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .server_client.Response status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OnlinePlayers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_client.OnlinePlayers)
  GOOGLE_DCHECK_NE(&from, this);
  const OnlinePlayers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OnlinePlayers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_client.OnlinePlayers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_client.OnlinePlayers)
    MergeFrom(*source);
  }
}

void OnlinePlayers::MergeFrom(const OnlinePlayers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_client.OnlinePlayers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.has_status()) {
    _internal_mutable_status()->::server_client::Response::MergeFrom(from._internal_status());
  }
}

void OnlinePlayers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_client.OnlinePlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlinePlayers::CopyFrom(const OnlinePlayers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_client.OnlinePlayers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlinePlayers::IsInitialized() const {
  return true;
}

void OnlinePlayers::InternalSwap(OnlinePlayers* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  players_.InternalSwap(&other->players_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OnlinePlayers::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Change::InitAsDefaultInstance() {
}
class Change::_Internal {
 public:
};

Change::Change()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_client.Change)
}
Change::Change(const Change& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:server_client.Change)
}

void Change::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Change_client_5fserver_2eproto.base);
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Change::~Change() {
  // @@protoc_insertion_point(destructor:server_client.Change)
  SharedDtor();
}

void Change::SharedDtor() {
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Change::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Change& Change::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Change_client_5fserver_2eproto.base);
  return *internal_default_instance();
}


void Change::Clear() {
// @@protoc_insertion_point(message_clear_start:server_client.Change)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* Change::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_username(), ptr, ctx, "server_client.Change.username");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_password(), ptr, ctx, "server_client.Change.password");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Change::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_client.Change)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server_client.Change.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string password = 2;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "server_client.Change.password");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_client.Change)
  return target;
}

size_t Change::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_client.Change)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 2;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Change::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_client.Change)
  GOOGLE_DCHECK_NE(&from, this);
  const Change* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Change>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_client.Change)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_client.Change)
    MergeFrom(*source);
  }
}

void Change::MergeFrom(const Change& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_client.Change)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.password().size() > 0) {

    password_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void Change::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_client.Change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Change::CopyFrom(const Change& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_client.Change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Change::IsInitialized() const {
  return true;
}

void Change::InternalSwap(Change* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Change::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ChangesResponse::InitAsDefaultInstance() {
  ::server_client::_ChangesResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::server_client::Response*>(
      ::server_client::Response::internal_default_instance());
}
class ChangesResponse::_Internal {
 public:
  static const ::server_client::Response& status(const ChangesResponse* msg);
};

const ::server_client::Response&
ChangesResponse::_Internal::status(const ChangesResponse* msg) {
  return *msg->status_;
}
ChangesResponse::ChangesResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:server_client.ChangesResponse)
}
ChangesResponse::ChangesResponse(const ChangesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::server_client::Response(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:server_client.ChangesResponse)
}

void ChangesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChangesResponse_client_5fserver_2eproto.base);
  status_ = nullptr;
}

ChangesResponse::~ChangesResponse() {
  // @@protoc_insertion_point(destructor:server_client.ChangesResponse)
  SharedDtor();
}

void ChangesResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void ChangesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChangesResponse& ChangesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChangesResponse_client_5fserver_2eproto.base);
  return *internal_default_instance();
}


void ChangesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:server_client.ChangesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ChangesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .server_client.Response status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangesResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:server_client.ChangesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .server_client.Response status = 1;
  if (this->has_status()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:server_client.ChangesResponse)
  return target;
}

size_t ChangesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:server_client.ChangesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .server_client.Response status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:server_client.ChangesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ChangesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChangesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:server_client.ChangesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:server_client.ChangesResponse)
    MergeFrom(*source);
  }
}

void ChangesResponse::MergeFrom(const ChangesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:server_client.ChangesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::server_client::Response::MergeFrom(from._internal_status());
  }
}

void ChangesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:server_client.ChangesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangesResponse::CopyFrom(const ChangesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:server_client.ChangesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangesResponse::IsInitialized() const {
  return true;
}

void ChangesResponse::InternalSwap(ChangesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace server_client
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::server_client::Player* Arena::CreateMaybeMessage< ::server_client::Player >(Arena* arena) {
  return Arena::CreateInternal< ::server_client::Player >(arena);
}
template<> PROTOBUF_NOINLINE ::server_client::Operation* Arena::CreateMaybeMessage< ::server_client::Operation >(Arena* arena) {
  return Arena::CreateInternal< ::server_client::Operation >(arena);
}
template<> PROTOBUF_NOINLINE ::server_client::Response* Arena::CreateMaybeMessage< ::server_client::Response >(Arena* arena) {
  return Arena::CreateInternal< ::server_client::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::server_client::LogInSignUp* Arena::CreateMaybeMessage< ::server_client::LogInSignUp >(Arena* arena) {
  return Arena::CreateInternal< ::server_client::LogInSignUp >(arena);
}
template<> PROTOBUF_NOINLINE ::server_client::LogInSignUpResponse* Arena::CreateMaybeMessage< ::server_client::LogInSignUpResponse >(Arena* arena) {
  return Arena::CreateInternal< ::server_client::LogInSignUpResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::server_client::Ranking* Arena::CreateMaybeMessage< ::server_client::Ranking >(Arena* arena) {
  return Arena::CreateInternal< ::server_client::Ranking >(arena);
}
template<> PROTOBUF_NOINLINE ::server_client::Play* Arena::CreateMaybeMessage< ::server_client::Play >(Arena* arena) {
  return Arena::CreateInternal< ::server_client::Play >(arena);
}
template<> PROTOBUF_NOINLINE ::server_client::GameResult* Arena::CreateMaybeMessage< ::server_client::GameResult >(Arena* arena) {
  return Arena::CreateInternal< ::server_client::GameResult >(arena);
}
template<> PROTOBUF_NOINLINE ::server_client::Keep* Arena::CreateMaybeMessage< ::server_client::Keep >(Arena* arena) {
  return Arena::CreateInternal< ::server_client::Keep >(arena);
}
template<> PROTOBUF_NOINLINE ::server_client::ChallengeRequest* Arena::CreateMaybeMessage< ::server_client::ChallengeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::server_client::ChallengeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::server_client::ChallengeResponse* Arena::CreateMaybeMessage< ::server_client::ChallengeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::server_client::ChallengeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::server_client::View* Arena::CreateMaybeMessage< ::server_client::View >(Arena* arena) {
  return Arena::CreateInternal< ::server_client::View >(arena);
}
template<> PROTOBUF_NOINLINE ::server_client::OnlinePlayers* Arena::CreateMaybeMessage< ::server_client::OnlinePlayers >(Arena* arena) {
  return Arena::CreateInternal< ::server_client::OnlinePlayers >(arena);
}
template<> PROTOBUF_NOINLINE ::server_client::Change* Arena::CreateMaybeMessage< ::server_client::Change >(Arena* arena) {
  return Arena::CreateInternal< ::server_client::Change >(arena);
}
template<> PROTOBUF_NOINLINE ::server_client::ChangesResponse* Arena::CreateMaybeMessage< ::server_client::ChangesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::server_client::ChangesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
