// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_client_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_client_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_client_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_client_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_client_5fserver_2eproto;
namespace server_client {
class ChallengeRequest;
class ChallengeRequestDefaultTypeInternal;
extern ChallengeRequestDefaultTypeInternal _ChallengeRequest_default_instance_;
class ChallengeResponse;
class ChallengeResponseDefaultTypeInternal;
extern ChallengeResponseDefaultTypeInternal _ChallengeResponse_default_instance_;
class Change;
class ChangeDefaultTypeInternal;
extern ChangeDefaultTypeInternal _Change_default_instance_;
class ChangesResponse;
class ChangesResponseDefaultTypeInternal;
extern ChangesResponseDefaultTypeInternal _ChangesResponse_default_instance_;
class GameResult;
class GameResultDefaultTypeInternal;
extern GameResultDefaultTypeInternal _GameResult_default_instance_;
class Keep;
class KeepDefaultTypeInternal;
extern KeepDefaultTypeInternal _Keep_default_instance_;
class LogInSignUp;
class LogInSignUpDefaultTypeInternal;
extern LogInSignUpDefaultTypeInternal _LogInSignUp_default_instance_;
class LogInSignUpResponse;
class LogInSignUpResponseDefaultTypeInternal;
extern LogInSignUpResponseDefaultTypeInternal _LogInSignUpResponse_default_instance_;
class OnlinePlayers;
class OnlinePlayersDefaultTypeInternal;
extern OnlinePlayersDefaultTypeInternal _OnlinePlayers_default_instance_;
class Operation;
class OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class Play;
class PlayDefaultTypeInternal;
extern PlayDefaultTypeInternal _Play_default_instance_;
class Player;
class PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class Ranking;
class RankingDefaultTypeInternal;
extern RankingDefaultTypeInternal _Ranking_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class View;
class ViewDefaultTypeInternal;
extern ViewDefaultTypeInternal _View_default_instance_;
}  // namespace server_client
PROTOBUF_NAMESPACE_OPEN
template<> ::server_client::ChallengeRequest* Arena::CreateMaybeMessage<::server_client::ChallengeRequest>(Arena*);
template<> ::server_client::ChallengeResponse* Arena::CreateMaybeMessage<::server_client::ChallengeResponse>(Arena*);
template<> ::server_client::Change* Arena::CreateMaybeMessage<::server_client::Change>(Arena*);
template<> ::server_client::ChangesResponse* Arena::CreateMaybeMessage<::server_client::ChangesResponse>(Arena*);
template<> ::server_client::GameResult* Arena::CreateMaybeMessage<::server_client::GameResult>(Arena*);
template<> ::server_client::Keep* Arena::CreateMaybeMessage<::server_client::Keep>(Arena*);
template<> ::server_client::LogInSignUp* Arena::CreateMaybeMessage<::server_client::LogInSignUp>(Arena*);
template<> ::server_client::LogInSignUpResponse* Arena::CreateMaybeMessage<::server_client::LogInSignUpResponse>(Arena*);
template<> ::server_client::OnlinePlayers* Arena::CreateMaybeMessage<::server_client::OnlinePlayers>(Arena*);
template<> ::server_client::Operation* Arena::CreateMaybeMessage<::server_client::Operation>(Arena*);
template<> ::server_client::Play* Arena::CreateMaybeMessage<::server_client::Play>(Arena*);
template<> ::server_client::Player* Arena::CreateMaybeMessage<::server_client::Player>(Arena*);
template<> ::server_client::Ranking* Arena::CreateMaybeMessage<::server_client::Ranking>(Arena*);
template<> ::server_client::Response* Arena::CreateMaybeMessage<::server_client::Response>(Arena*);
template<> ::server_client::View* Arena::CreateMaybeMessage<::server_client::View>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace server_client {

enum Operation_Request : int {
  Operation_Request_RANKING = 0,
  Operation_Request_PLAY = 1,
  Operation_Request_ONLINE = 2,
  Operation_Request_VIEW = 3,
  Operation_Request_CHANGE = 4,
  Operation_Request_EXIT = 5,
  Operation_Request_Operation_Request_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Operation_Request_Operation_Request_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Operation_Request_IsValid(int value);
constexpr Operation_Request Operation_Request_Request_MIN = Operation_Request_RANKING;
constexpr Operation_Request Operation_Request_Request_MAX = Operation_Request_EXIT;
constexpr int Operation_Request_Request_ARRAYSIZE = Operation_Request_Request_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Operation_Request_descriptor();
template<typename T>
inline const std::string& Operation_Request_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Operation_Request>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Operation_Request_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Operation_Request_descriptor(), enum_t_value);
}
inline bool Operation_Request_Parse(
    const std::string& name, Operation_Request* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Operation_Request>(
    Operation_Request_descriptor(), name, value);
}
enum LogInSignUp_Type : int {
  LogInSignUp_Type_SIGNUP = 0,
  LogInSignUp_Type_LOGIN = 1,
  LogInSignUp_Type_LogInSignUp_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LogInSignUp_Type_LogInSignUp_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LogInSignUp_Type_IsValid(int value);
constexpr LogInSignUp_Type LogInSignUp_Type_Type_MIN = LogInSignUp_Type_SIGNUP;
constexpr LogInSignUp_Type LogInSignUp_Type_Type_MAX = LogInSignUp_Type_LOGIN;
constexpr int LogInSignUp_Type_Type_ARRAYSIZE = LogInSignUp_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogInSignUp_Type_descriptor();
template<typename T>
inline const std::string& LogInSignUp_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogInSignUp_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogInSignUp_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogInSignUp_Type_descriptor(), enum_t_value);
}
inline bool LogInSignUp_Type_Parse(
    const std::string& name, LogInSignUp_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogInSignUp_Type>(
    LogInSignUp_Type_descriptor(), name, value);
}
enum Play_Type : int {
  Play_Type_WAIT = 0,
  Play_Type_CHALLENGE = 1,
  Play_Type_Play_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Play_Type_Play_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Play_Type_IsValid(int value);
constexpr Play_Type Play_Type_Type_MIN = Play_Type_WAIT;
constexpr Play_Type Play_Type_Type_MAX = Play_Type_CHALLENGE;
constexpr int Play_Type_Type_ARRAYSIZE = Play_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Play_Type_descriptor();
template<typename T>
inline const std::string& Play_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Play_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Play_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Play_Type_descriptor(), enum_t_value);
}
inline bool Play_Type_Parse(
    const std::string& name, Play_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Play_Type>(
    Play_Type_descriptor(), name, value);
}
enum GameResult_Result : int {
  GameResult_Result_HAS_WINNER = 0,
  GameResult_Result_TIED = 1,
  GameResult_Result_GameResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GameResult_Result_GameResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GameResult_Result_IsValid(int value);
constexpr GameResult_Result GameResult_Result_Result_MIN = GameResult_Result_HAS_WINNER;
constexpr GameResult_Result GameResult_Result_Result_MAX = GameResult_Result_TIED;
constexpr int GameResult_Result_Result_ARRAYSIZE = GameResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameResult_Result_descriptor();
template<typename T>
inline const std::string& GameResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GameResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GameResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GameResult_Result_descriptor(), enum_t_value);
}
inline bool GameResult_Result_Parse(
    const std::string& name, GameResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameResult_Result>(
    GameResult_Result_descriptor(), name, value);
}
enum GameResult_Winner : int {
  GameResult_Winner_PLAYER1 = 0,
  GameResult_Winner_PLAYER2 = 1,
  GameResult_Winner_GameResult_Winner_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GameResult_Winner_GameResult_Winner_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GameResult_Winner_IsValid(int value);
constexpr GameResult_Winner GameResult_Winner_Winner_MIN = GameResult_Winner_PLAYER1;
constexpr GameResult_Winner GameResult_Winner_Winner_MAX = GameResult_Winner_PLAYER2;
constexpr int GameResult_Winner_Winner_ARRAYSIZE = GameResult_Winner_Winner_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameResult_Winner_descriptor();
template<typename T>
inline const std::string& GameResult_Winner_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GameResult_Winner>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GameResult_Winner_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GameResult_Winner_descriptor(), enum_t_value);
}
inline bool GameResult_Winner_Parse(
    const std::string& name, GameResult_Winner* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameResult_Winner>(
    GameResult_Winner_descriptor(), name, value);
}
enum Keep_Type : int {
  Keep_Type_ACK = 0,
  Keep_Type_CHALLENGE = 1,
  Keep_Type_Keep_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Keep_Type_Keep_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Keep_Type_IsValid(int value);
constexpr Keep_Type Keep_Type_Type_MIN = Keep_Type_ACK;
constexpr Keep_Type Keep_Type_Type_MAX = Keep_Type_CHALLENGE;
constexpr int Keep_Type_Type_ARRAYSIZE = Keep_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Keep_Type_descriptor();
template<typename T>
inline const std::string& Keep_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Keep_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Keep_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Keep_Type_descriptor(), enum_t_value);
}
inline bool Keep_Type_Parse(
    const std::string& name, Keep_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Keep_Type>(
    Keep_Type_descriptor(), name, value);
}
enum ChallengeResponse_Answer : int {
  ChallengeResponse_Answer_ACCEPT = 0,
  ChallengeResponse_Answer_DENY = 1,
  ChallengeResponse_Answer_ChallengeResponse_Answer_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChallengeResponse_Answer_ChallengeResponse_Answer_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChallengeResponse_Answer_IsValid(int value);
constexpr ChallengeResponse_Answer ChallengeResponse_Answer_Answer_MIN = ChallengeResponse_Answer_ACCEPT;
constexpr ChallengeResponse_Answer ChallengeResponse_Answer_Answer_MAX = ChallengeResponse_Answer_DENY;
constexpr int ChallengeResponse_Answer_Answer_ARRAYSIZE = ChallengeResponse_Answer_Answer_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChallengeResponse_Answer_descriptor();
template<typename T>
inline const std::string& ChallengeResponse_Answer_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChallengeResponse_Answer>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChallengeResponse_Answer_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChallengeResponse_Answer_descriptor(), enum_t_value);
}
inline bool ChallengeResponse_Answer_Parse(
    const std::string& name, ChallengeResponse_Answer* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChallengeResponse_Answer>(
    ChallengeResponse_Answer_descriptor(), name, value);
}
// ===================================================================

class Player :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_client.Player) */ {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return CreateMaybeMessage<Player>(nullptr);
  }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server_client.Player";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fserver_2eproto);
    return ::descriptor_table_client_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kIdFieldNumber = 1,
    kWinsFieldNumber = 4,
    kTiedsFieldNumber = 5,
    kLostFieldNumber = 6,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 wins = 4;
  void clear_wins();
  ::PROTOBUF_NAMESPACE_ID::uint32 wins() const;
  void set_wins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wins() const;
  void _internal_set_wins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tieds = 5;
  void clear_tieds();
  ::PROTOBUF_NAMESPACE_ID::uint32 tieds() const;
  void set_tieds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tieds() const;
  void _internal_set_tieds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lost = 6;
  void clear_lost();
  ::PROTOBUF_NAMESPACE_ID::uint32 lost() const;
  void set_lost(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lost() const;
  void _internal_set_lost(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:server_client.Player)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wins_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tieds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Operation :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_client.Operation) */ {
 public:
  Operation();
  virtual ~Operation();

  Operation(const Operation& from);
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Operation& operator=(Operation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Operation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }
  inline void Swap(Operation* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Operation* New() const final {
    return CreateMaybeMessage<Operation>(nullptr);
  }

  Operation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server_client.Operation";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fserver_2eproto);
    return ::descriptor_table_client_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Operation_Request Request;
  static constexpr Request RANKING =
    Operation_Request_RANKING;
  static constexpr Request PLAY =
    Operation_Request_PLAY;
  static constexpr Request ONLINE =
    Operation_Request_ONLINE;
  static constexpr Request VIEW =
    Operation_Request_VIEW;
  static constexpr Request CHANGE =
    Operation_Request_CHANGE;
  static constexpr Request EXIT =
    Operation_Request_EXIT;
  static inline bool Request_IsValid(int value) {
    return Operation_Request_IsValid(value);
  }
  static constexpr Request Request_MIN =
    Operation_Request_Request_MIN;
  static constexpr Request Request_MAX =
    Operation_Request_Request_MAX;
  static constexpr int Request_ARRAYSIZE =
    Operation_Request_Request_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Request_descriptor() {
    return Operation_Request_descriptor();
  }
  template<typename T>
  static inline const std::string& Request_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Request>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Request_Name.");
    return Operation_Request_Name(enum_t_value);
  }
  static inline bool Request_Parse(const std::string& name,
      Request* value) {
    return Operation_Request_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kOperationFieldNumber = 1,
  };
  // .server_client.Operation.Request operation = 1;
  void clear_operation();
  ::server_client::Operation_Request operation() const;
  void set_operation(::server_client::Operation_Request value);
  private:
  ::server_client::Operation_Request _internal_operation() const;
  void _internal_set_operation(::server_client::Operation_Request value);
  public:

  // @@protoc_insertion_point(class_scope:server_client.Operation)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_client.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server_client.Response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fserver_2eproto);
    return ::descriptor_table_client_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStatusCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 status_code = 1;
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:server_client.Response)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fserver_2eproto;
};
// -------------------------------------------------------------------

class LogInSignUp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_client.LogInSignUp) */ {
 public:
  LogInSignUp();
  virtual ~LogInSignUp();

  LogInSignUp(const LogInSignUp& from);
  LogInSignUp(LogInSignUp&& from) noexcept
    : LogInSignUp() {
    *this = ::std::move(from);
  }

  inline LogInSignUp& operator=(const LogInSignUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogInSignUp& operator=(LogInSignUp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogInSignUp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogInSignUp* internal_default_instance() {
    return reinterpret_cast<const LogInSignUp*>(
               &_LogInSignUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LogInSignUp& a, LogInSignUp& b) {
    a.Swap(&b);
  }
  inline void Swap(LogInSignUp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogInSignUp* New() const final {
    return CreateMaybeMessage<LogInSignUp>(nullptr);
  }

  LogInSignUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogInSignUp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogInSignUp& from);
  void MergeFrom(const LogInSignUp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogInSignUp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server_client.LogInSignUp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fserver_2eproto);
    return ::descriptor_table_client_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LogInSignUp_Type Type;
  static constexpr Type SIGNUP =
    LogInSignUp_Type_SIGNUP;
  static constexpr Type LOGIN =
    LogInSignUp_Type_LOGIN;
  static inline bool Type_IsValid(int value) {
    return LogInSignUp_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    LogInSignUp_Type_Type_MIN;
  static constexpr Type Type_MAX =
    LogInSignUp_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    LogInSignUp_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return LogInSignUp_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return LogInSignUp_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return LogInSignUp_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
    kRequestTypeFieldNumber = 3,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // .server_client.LogInSignUp.Type request_type = 3;
  void clear_request_type();
  ::server_client::LogInSignUp_Type request_type() const;
  void set_request_type(::server_client::LogInSignUp_Type value);
  private:
  ::server_client::LogInSignUp_Type _internal_request_type() const;
  void _internal_set_request_type(::server_client::LogInSignUp_Type value);
  public:

  // @@protoc_insertion_point(class_scope:server_client.LogInSignUp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  int request_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fserver_2eproto;
};
// -------------------------------------------------------------------

class LogInSignUpResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_client.LogInSignUpResponse) */ {
 public:
  LogInSignUpResponse();
  virtual ~LogInSignUpResponse();

  LogInSignUpResponse(const LogInSignUpResponse& from);
  LogInSignUpResponse(LogInSignUpResponse&& from) noexcept
    : LogInSignUpResponse() {
    *this = ::std::move(from);
  }

  inline LogInSignUpResponse& operator=(const LogInSignUpResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogInSignUpResponse& operator=(LogInSignUpResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogInSignUpResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogInSignUpResponse* internal_default_instance() {
    return reinterpret_cast<const LogInSignUpResponse*>(
               &_LogInSignUpResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LogInSignUpResponse& a, LogInSignUpResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LogInSignUpResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogInSignUpResponse* New() const final {
    return CreateMaybeMessage<LogInSignUpResponse>(nullptr);
  }

  LogInSignUpResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogInSignUpResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogInSignUpResponse& from);
  void MergeFrom(const LogInSignUpResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogInSignUpResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server_client.LogInSignUpResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fserver_2eproto);
    return ::descriptor_table_client_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kPlayerFieldNumber = 2,
    kAlreadyLoggedFieldNumber = 3,
  };
  // .server_client.Response status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::server_client::Response& status() const;
  ::server_client::Response* release_status();
  ::server_client::Response* mutable_status();
  void set_allocated_status(::server_client::Response* status);
  private:
  const ::server_client::Response& _internal_status() const;
  ::server_client::Response* _internal_mutable_status();
  public:

  // .server_client.Player player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::server_client::Player& player() const;
  ::server_client::Player* release_player();
  ::server_client::Player* mutable_player();
  void set_allocated_player(::server_client::Player* player);
  private:
  const ::server_client::Player& _internal_player() const;
  ::server_client::Player* _internal_mutable_player();
  public:

  // bool already_logged = 3;
  void clear_already_logged();
  bool already_logged() const;
  void set_already_logged(bool value);
  private:
  bool _internal_already_logged() const;
  void _internal_set_already_logged(bool value);
  public:

  // @@protoc_insertion_point(class_scope:server_client.LogInSignUpResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::server_client::Response* status_;
  ::server_client::Player* player_;
  bool already_logged_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Ranking :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_client.Ranking) */ {
 public:
  Ranking();
  virtual ~Ranking();

  Ranking(const Ranking& from);
  Ranking(Ranking&& from) noexcept
    : Ranking() {
    *this = ::std::move(from);
  }

  inline Ranking& operator=(const Ranking& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ranking& operator=(Ranking&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ranking& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ranking* internal_default_instance() {
    return reinterpret_cast<const Ranking*>(
               &_Ranking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Ranking& a, Ranking& b) {
    a.Swap(&b);
  }
  inline void Swap(Ranking* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ranking* New() const final {
    return CreateMaybeMessage<Ranking>(nullptr);
  }

  Ranking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ranking>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ranking& from);
  void MergeFrom(const Ranking& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ranking* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server_client.Ranking";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fserver_2eproto);
    return ::descriptor_table_client_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .server_client.Player players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::server_client::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server_client::Player >*
      mutable_players();
  private:
  const ::server_client::Player& _internal_players(int index) const;
  ::server_client::Player* _internal_add_players();
  public:
  const ::server_client::Player& players(int index) const;
  ::server_client::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server_client::Player >&
      players() const;

  // .server_client.Response status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::server_client::Response& status() const;
  ::server_client::Response* release_status();
  ::server_client::Response* mutable_status();
  void set_allocated_status(::server_client::Response* status);
  private:
  const ::server_client::Response& _internal_status() const;
  ::server_client::Response* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:server_client.Ranking)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server_client::Player > players_;
  ::server_client::Response* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Play :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_client.Play) */ {
 public:
  Play();
  virtual ~Play();

  Play(const Play& from);
  Play(Play&& from) noexcept
    : Play() {
    *this = ::std::move(from);
  }

  inline Play& operator=(const Play& from) {
    CopyFrom(from);
    return *this;
  }
  inline Play& operator=(Play&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Play& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Play* internal_default_instance() {
    return reinterpret_cast<const Play*>(
               &_Play_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Play& a, Play& b) {
    a.Swap(&b);
  }
  inline void Swap(Play* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Play* New() const final {
    return CreateMaybeMessage<Play>(nullptr);
  }

  Play* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Play>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Play& from);
  void MergeFrom(const Play& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Play* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server_client.Play";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fserver_2eproto);
    return ::descriptor_table_client_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Play_Type Type;
  static constexpr Type WAIT =
    Play_Type_WAIT;
  static constexpr Type CHALLENGE =
    Play_Type_CHALLENGE;
  static inline bool Type_IsValid(int value) {
    return Play_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Play_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Play_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Play_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Play_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Play_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Play_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kChallendedPlayerFieldNumber = 2,
    kRequestTypeFieldNumber = 1,
  };
  // .server_client.Player challended_player = 2;
  bool has_challended_player() const;
  private:
  bool _internal_has_challended_player() const;
  public:
  void clear_challended_player();
  const ::server_client::Player& challended_player() const;
  ::server_client::Player* release_challended_player();
  ::server_client::Player* mutable_challended_player();
  void set_allocated_challended_player(::server_client::Player* challended_player);
  private:
  const ::server_client::Player& _internal_challended_player() const;
  ::server_client::Player* _internal_mutable_challended_player();
  public:

  // .server_client.Play.Type request_type = 1;
  void clear_request_type();
  ::server_client::Play_Type request_type() const;
  void set_request_type(::server_client::Play_Type value);
  private:
  ::server_client::Play_Type _internal_request_type() const;
  void _internal_set_request_type(::server_client::Play_Type value);
  public:

  // @@protoc_insertion_point(class_scope:server_client.Play)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::server_client::Player* challended_player_;
  int request_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fserver_2eproto;
};
// -------------------------------------------------------------------

class GameResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_client.GameResult) */ {
 public:
  GameResult();
  virtual ~GameResult();

  GameResult(const GameResult& from);
  GameResult(GameResult&& from) noexcept
    : GameResult() {
    *this = ::std::move(from);
  }

  inline GameResult& operator=(const GameResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameResult& operator=(GameResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameResult* internal_default_instance() {
    return reinterpret_cast<const GameResult*>(
               &_GameResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GameResult& a, GameResult& b) {
    a.Swap(&b);
  }
  inline void Swap(GameResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameResult* New() const final {
    return CreateMaybeMessage<GameResult>(nullptr);
  }

  GameResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameResult& from);
  void MergeFrom(const GameResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server_client.GameResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fserver_2eproto);
    return ::descriptor_table_client_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GameResult_Result Result;
  static constexpr Result HAS_WINNER =
    GameResult_Result_HAS_WINNER;
  static constexpr Result TIED =
    GameResult_Result_TIED;
  static inline bool Result_IsValid(int value) {
    return GameResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    GameResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    GameResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    GameResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return GameResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return GameResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(const std::string& name,
      Result* value) {
    return GameResult_Result_Parse(name, value);
  }

  typedef GameResult_Winner Winner;
  static constexpr Winner PLAYER1 =
    GameResult_Winner_PLAYER1;
  static constexpr Winner PLAYER2 =
    GameResult_Winner_PLAYER2;
  static inline bool Winner_IsValid(int value) {
    return GameResult_Winner_IsValid(value);
  }
  static constexpr Winner Winner_MIN =
    GameResult_Winner_Winner_MIN;
  static constexpr Winner Winner_MAX =
    GameResult_Winner_Winner_MAX;
  static constexpr int Winner_ARRAYSIZE =
    GameResult_Winner_Winner_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Winner_descriptor() {
    return GameResult_Winner_descriptor();
  }
  template<typename T>
  static inline const std::string& Winner_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Winner>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Winner_Name.");
    return GameResult_Winner_Name(enum_t_value);
  }
  static inline bool Winner_Parse(const std::string& name,
      Winner* value) {
    return GameResult_Winner_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
    kWinnerFieldNumber = 2,
  };
  // .server_client.GameResult.Result result = 1;
  void clear_result();
  ::server_client::GameResult_Result result() const;
  void set_result(::server_client::GameResult_Result value);
  private:
  ::server_client::GameResult_Result _internal_result() const;
  void _internal_set_result(::server_client::GameResult_Result value);
  public:

  // .server_client.GameResult.Winner winner = 2;
  void clear_winner();
  ::server_client::GameResult_Winner winner() const;
  void set_winner(::server_client::GameResult_Winner value);
  private:
  ::server_client::GameResult_Winner _internal_winner() const;
  void _internal_set_winner(::server_client::GameResult_Winner value);
  public:

  // @@protoc_insertion_point(class_scope:server_client.GameResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int result_;
  int winner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Keep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_client.Keep) */ {
 public:
  Keep();
  virtual ~Keep();

  Keep(const Keep& from);
  Keep(Keep&& from) noexcept
    : Keep() {
    *this = ::std::move(from);
  }

  inline Keep& operator=(const Keep& from) {
    CopyFrom(from);
    return *this;
  }
  inline Keep& operator=(Keep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Keep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Keep* internal_default_instance() {
    return reinterpret_cast<const Keep*>(
               &_Keep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Keep& a, Keep& b) {
    a.Swap(&b);
  }
  inline void Swap(Keep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Keep* New() const final {
    return CreateMaybeMessage<Keep>(nullptr);
  }

  Keep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Keep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Keep& from);
  void MergeFrom(const Keep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Keep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server_client.Keep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fserver_2eproto);
    return ::descriptor_table_client_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Keep_Type Type;
  static constexpr Type ACK =
    Keep_Type_ACK;
  static constexpr Type CHALLENGE =
    Keep_Type_CHALLENGE;
  static inline bool Type_IsValid(int value) {
    return Keep_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Keep_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Keep_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Keep_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Keep_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Keep_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return Keep_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .server_client.Keep.Type type = 1;
  void clear_type();
  ::server_client::Keep_Type type() const;
  void set_type(::server_client::Keep_Type value);
  private:
  ::server_client::Keep_Type _internal_type() const;
  void _internal_set_type(::server_client::Keep_Type value);
  public:

  // @@protoc_insertion_point(class_scope:server_client.Keep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ChallengeRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_client.ChallengeRequest) */ {
 public:
  ChallengeRequest();
  virtual ~ChallengeRequest();

  ChallengeRequest(const ChallengeRequest& from);
  ChallengeRequest(ChallengeRequest&& from) noexcept
    : ChallengeRequest() {
    *this = ::std::move(from);
  }

  inline ChallengeRequest& operator=(const ChallengeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChallengeRequest& operator=(ChallengeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChallengeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChallengeRequest* internal_default_instance() {
    return reinterpret_cast<const ChallengeRequest*>(
               &_ChallengeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ChallengeRequest& a, ChallengeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChallengeRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChallengeRequest* New() const final {
    return CreateMaybeMessage<ChallengeRequest>(nullptr);
  }

  ChallengeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChallengeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChallengeRequest& from);
  void MergeFrom(const ChallengeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChallengeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server_client.ChallengeRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fserver_2eproto);
    return ::descriptor_table_client_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChallenderPlayerFieldNumber = 1,
  };
  // .server_client.Player challender_player = 1;
  bool has_challender_player() const;
  private:
  bool _internal_has_challender_player() const;
  public:
  void clear_challender_player();
  const ::server_client::Player& challender_player() const;
  ::server_client::Player* release_challender_player();
  ::server_client::Player* mutable_challender_player();
  void set_allocated_challender_player(::server_client::Player* challender_player);
  private:
  const ::server_client::Player& _internal_challender_player() const;
  ::server_client::Player* _internal_mutable_challender_player();
  public:

  // @@protoc_insertion_point(class_scope:server_client.ChallengeRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::server_client::Player* challender_player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ChallengeResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_client.ChallengeResponse) */ {
 public:
  ChallengeResponse();
  virtual ~ChallengeResponse();

  ChallengeResponse(const ChallengeResponse& from);
  ChallengeResponse(ChallengeResponse&& from) noexcept
    : ChallengeResponse() {
    *this = ::std::move(from);
  }

  inline ChallengeResponse& operator=(const ChallengeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChallengeResponse& operator=(ChallengeResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChallengeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChallengeResponse* internal_default_instance() {
    return reinterpret_cast<const ChallengeResponse*>(
               &_ChallengeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ChallengeResponse& a, ChallengeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChallengeResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChallengeResponse* New() const final {
    return CreateMaybeMessage<ChallengeResponse>(nullptr);
  }

  ChallengeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChallengeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChallengeResponse& from);
  void MergeFrom(const ChallengeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChallengeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server_client.ChallengeResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fserver_2eproto);
    return ::descriptor_table_client_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ChallengeResponse_Answer Answer;
  static constexpr Answer ACCEPT =
    ChallengeResponse_Answer_ACCEPT;
  static constexpr Answer DENY =
    ChallengeResponse_Answer_DENY;
  static inline bool Answer_IsValid(int value) {
    return ChallengeResponse_Answer_IsValid(value);
  }
  static constexpr Answer Answer_MIN =
    ChallengeResponse_Answer_Answer_MIN;
  static constexpr Answer Answer_MAX =
    ChallengeResponse_Answer_Answer_MAX;
  static constexpr int Answer_ARRAYSIZE =
    ChallengeResponse_Answer_Answer_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Answer_descriptor() {
    return ChallengeResponse_Answer_descriptor();
  }
  template<typename T>
  static inline const std::string& Answer_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Answer>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Answer_Name.");
    return ChallengeResponse_Answer_Name(enum_t_value);
  }
  static inline bool Answer_Parse(const std::string& name,
      Answer* value) {
    return ChallengeResponse_Answer_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAnswerFieldNumber = 1,
  };
  // .server_client.ChallengeResponse.Answer answer = 1;
  void clear_answer();
  ::server_client::ChallengeResponse_Answer answer() const;
  void set_answer(::server_client::ChallengeResponse_Answer value);
  private:
  ::server_client::ChallengeResponse_Answer _internal_answer() const;
  void _internal_set_answer(::server_client::ChallengeResponse_Answer value);
  public:

  // @@protoc_insertion_point(class_scope:server_client.ChallengeResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int answer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fserver_2eproto;
};
// -------------------------------------------------------------------

class View :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_client.View) */ {
 public:
  View();
  virtual ~View();

  View(const View& from);
  View(View&& from) noexcept
    : View() {
    *this = ::std::move(from);
  }

  inline View& operator=(const View& from) {
    CopyFrom(from);
    return *this;
  }
  inline View& operator=(View&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const View& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const View* internal_default_instance() {
    return reinterpret_cast<const View*>(
               &_View_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(View& a, View& b) {
    a.Swap(&b);
  }
  inline void Swap(View* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline View* New() const final {
    return CreateMaybeMessage<View>(nullptr);
  }

  View* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<View>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const View& from);
  void MergeFrom(const View& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(View* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server_client.View";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fserver_2eproto);
    return ::descriptor_table_client_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kPlayerFieldNumber = 2,
  };
  // .server_client.Response status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::server_client::Response& status() const;
  ::server_client::Response* release_status();
  ::server_client::Response* mutable_status();
  void set_allocated_status(::server_client::Response* status);
  private:
  const ::server_client::Response& _internal_status() const;
  ::server_client::Response* _internal_mutable_status();
  public:

  // .server_client.Player player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::server_client::Player& player() const;
  ::server_client::Player* release_player();
  ::server_client::Player* mutable_player();
  void set_allocated_player(::server_client::Player* player);
  private:
  const ::server_client::Player& _internal_player() const;
  ::server_client::Player* _internal_mutable_player();
  public:

  // @@protoc_insertion_point(class_scope:server_client.View)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::server_client::Response* status_;
  ::server_client::Player* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fserver_2eproto;
};
// -------------------------------------------------------------------

class OnlinePlayers :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_client.OnlinePlayers) */ {
 public:
  OnlinePlayers();
  virtual ~OnlinePlayers();

  OnlinePlayers(const OnlinePlayers& from);
  OnlinePlayers(OnlinePlayers&& from) noexcept
    : OnlinePlayers() {
    *this = ::std::move(from);
  }

  inline OnlinePlayers& operator=(const OnlinePlayers& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnlinePlayers& operator=(OnlinePlayers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnlinePlayers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnlinePlayers* internal_default_instance() {
    return reinterpret_cast<const OnlinePlayers*>(
               &_OnlinePlayers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(OnlinePlayers& a, OnlinePlayers& b) {
    a.Swap(&b);
  }
  inline void Swap(OnlinePlayers* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnlinePlayers* New() const final {
    return CreateMaybeMessage<OnlinePlayers>(nullptr);
  }

  OnlinePlayers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnlinePlayers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnlinePlayers& from);
  void MergeFrom(const OnlinePlayers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnlinePlayers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server_client.OnlinePlayers";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fserver_2eproto);
    return ::descriptor_table_client_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .server_client.Player players = 2;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::server_client::Player* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server_client::Player >*
      mutable_players();
  private:
  const ::server_client::Player& _internal_players(int index) const;
  ::server_client::Player* _internal_add_players();
  public:
  const ::server_client::Player& players(int index) const;
  ::server_client::Player* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server_client::Player >&
      players() const;

  // .server_client.Response status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::server_client::Response& status() const;
  ::server_client::Response* release_status();
  ::server_client::Response* mutable_status();
  void set_allocated_status(::server_client::Response* status);
  private:
  const ::server_client::Response& _internal_status() const;
  ::server_client::Response* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:server_client.OnlinePlayers)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server_client::Player > players_;
  ::server_client::Response* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fserver_2eproto;
};
// -------------------------------------------------------------------

class Change :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_client.Change) */ {
 public:
  Change();
  virtual ~Change();

  Change(const Change& from);
  Change(Change&& from) noexcept
    : Change() {
    *this = ::std::move(from);
  }

  inline Change& operator=(const Change& from) {
    CopyFrom(from);
    return *this;
  }
  inline Change& operator=(Change&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Change& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Change* internal_default_instance() {
    return reinterpret_cast<const Change*>(
               &_Change_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Change& a, Change& b) {
    a.Swap(&b);
  }
  inline void Swap(Change* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Change* New() const final {
    return CreateMaybeMessage<Change>(nullptr);
  }

  Change* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Change>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Change& from);
  void MergeFrom(const Change& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Change* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server_client.Change";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fserver_2eproto);
    return ::descriptor_table_client_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string username = 1;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:server_client.Change)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fserver_2eproto;
};
// -------------------------------------------------------------------

class ChangesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_client.ChangesResponse) */ {
 public:
  ChangesResponse();
  virtual ~ChangesResponse();

  ChangesResponse(const ChangesResponse& from);
  ChangesResponse(ChangesResponse&& from) noexcept
    : ChangesResponse() {
    *this = ::std::move(from);
  }

  inline ChangesResponse& operator=(const ChangesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangesResponse& operator=(ChangesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangesResponse* internal_default_instance() {
    return reinterpret_cast<const ChangesResponse*>(
               &_ChangesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ChangesResponse& a, ChangesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangesResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangesResponse* New() const final {
    return CreateMaybeMessage<ChangesResponse>(nullptr);
  }

  ChangesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangesResponse& from);
  void MergeFrom(const ChangesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server_client.ChangesResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_client_5fserver_2eproto);
    return ::descriptor_table_client_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .server_client.Response status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::server_client::Response& status() const;
  ::server_client::Response* release_status();
  ::server_client::Response* mutable_status();
  void set_allocated_status(::server_client::Response* status);
  private:
  const ::server_client::Response& _internal_status() const;
  ::server_client::Response* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:server_client.ChangesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::server_client::Response* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_client_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Player

// uint64 id = 1;
inline void Player::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Player::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Player::id() const {
  // @@protoc_insertion_point(field_get:server_client.Player.id)
  return _internal_id();
}
inline void Player::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Player::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:server_client.Player.id)
}

// string username = 2;
inline void Player::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Player::username() const {
  // @@protoc_insertion_point(field_get:server_client.Player.username)
  return _internal_username();
}
inline void Player::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:server_client.Player.username)
}
inline std::string* Player::mutable_username() {
  // @@protoc_insertion_point(field_mutable:server_client.Player.username)
  return _internal_mutable_username();
}
inline const std::string& Player::_internal_username() const {
  return username_.GetNoArena();
}
inline void Player::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Player::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server_client.Player.username)
}
inline void Player::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server_client.Player.username)
}
inline void Player::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server_client.Player.username)
}
inline std::string* Player::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Player::release_username() {
  // @@protoc_insertion_point(field_release:server_client.Player.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:server_client.Player.username)
}

// string password = 3;
inline void Player::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Player::password() const {
  // @@protoc_insertion_point(field_get:server_client.Player.password)
  return _internal_password();
}
inline void Player::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:server_client.Player.password)
}
inline std::string* Player::mutable_password() {
  // @@protoc_insertion_point(field_mutable:server_client.Player.password)
  return _internal_mutable_password();
}
inline const std::string& Player::_internal_password() const {
  return password_.GetNoArena();
}
inline void Player::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Player::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server_client.Player.password)
}
inline void Player::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server_client.Player.password)
}
inline void Player::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server_client.Player.password)
}
inline std::string* Player::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Player::release_password() {
  // @@protoc_insertion_point(field_release:server_client.Player.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:server_client.Player.password)
}

// uint32 wins = 4;
inline void Player::clear_wins() {
  wins_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Player::_internal_wins() const {
  return wins_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Player::wins() const {
  // @@protoc_insertion_point(field_get:server_client.Player.wins)
  return _internal_wins();
}
inline void Player::_internal_set_wins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  wins_ = value;
}
inline void Player::set_wins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wins(value);
  // @@protoc_insertion_point(field_set:server_client.Player.wins)
}

// uint32 tieds = 5;
inline void Player::clear_tieds() {
  tieds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Player::_internal_tieds() const {
  return tieds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Player::tieds() const {
  // @@protoc_insertion_point(field_get:server_client.Player.tieds)
  return _internal_tieds();
}
inline void Player::_internal_set_tieds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tieds_ = value;
}
inline void Player::set_tieds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tieds(value);
  // @@protoc_insertion_point(field_set:server_client.Player.tieds)
}

// uint32 lost = 6;
inline void Player::clear_lost() {
  lost_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Player::_internal_lost() const {
  return lost_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Player::lost() const {
  // @@protoc_insertion_point(field_get:server_client.Player.lost)
  return _internal_lost();
}
inline void Player::_internal_set_lost(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lost_ = value;
}
inline void Player::set_lost(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lost(value);
  // @@protoc_insertion_point(field_set:server_client.Player.lost)
}

// -------------------------------------------------------------------

// Operation

// .server_client.Operation.Request operation = 1;
inline void Operation::clear_operation() {
  operation_ = 0;
}
inline ::server_client::Operation_Request Operation::_internal_operation() const {
  return static_cast< ::server_client::Operation_Request >(operation_);
}
inline ::server_client::Operation_Request Operation::operation() const {
  // @@protoc_insertion_point(field_get:server_client.Operation.operation)
  return _internal_operation();
}
inline void Operation::_internal_set_operation(::server_client::Operation_Request value) {
  
  operation_ = value;
}
inline void Operation::set_operation(::server_client::Operation_Request value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:server_client.Operation.operation)
}

// -------------------------------------------------------------------

// Response

// int32 status_code = 1;
inline void Response::clear_status_code() {
  status_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::status_code() const {
  // @@protoc_insertion_point(field_get:server_client.Response.status_code)
  return _internal_status_code();
}
inline void Response::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_code_ = value;
}
inline void Response::set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:server_client.Response.status_code)
}

// string message = 2;
inline void Response::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Response::message() const {
  // @@protoc_insertion_point(field_get:server_client.Response.message)
  return _internal_message();
}
inline void Response::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:server_client.Response.message)
}
inline std::string* Response::mutable_message() {
  // @@protoc_insertion_point(field_mutable:server_client.Response.message)
  return _internal_mutable_message();
}
inline const std::string& Response::_internal_message() const {
  return message_.GetNoArena();
}
inline void Response::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Response::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server_client.Response.message)
}
inline void Response::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server_client.Response.message)
}
inline void Response::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server_client.Response.message)
}
inline std::string* Response::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Response::release_message() {
  // @@protoc_insertion_point(field_release:server_client.Response.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:server_client.Response.message)
}

// -------------------------------------------------------------------

// LogInSignUp

// string username = 1;
inline void LogInSignUp::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogInSignUp::username() const {
  // @@protoc_insertion_point(field_get:server_client.LogInSignUp.username)
  return _internal_username();
}
inline void LogInSignUp::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:server_client.LogInSignUp.username)
}
inline std::string* LogInSignUp::mutable_username() {
  // @@protoc_insertion_point(field_mutable:server_client.LogInSignUp.username)
  return _internal_mutable_username();
}
inline const std::string& LogInSignUp::_internal_username() const {
  return username_.GetNoArena();
}
inline void LogInSignUp::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogInSignUp::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server_client.LogInSignUp.username)
}
inline void LogInSignUp::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server_client.LogInSignUp.username)
}
inline void LogInSignUp::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server_client.LogInSignUp.username)
}
inline std::string* LogInSignUp::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogInSignUp::release_username() {
  // @@protoc_insertion_point(field_release:server_client.LogInSignUp.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogInSignUp::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:server_client.LogInSignUp.username)
}

// string password = 2;
inline void LogInSignUp::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogInSignUp::password() const {
  // @@protoc_insertion_point(field_get:server_client.LogInSignUp.password)
  return _internal_password();
}
inline void LogInSignUp::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:server_client.LogInSignUp.password)
}
inline std::string* LogInSignUp::mutable_password() {
  // @@protoc_insertion_point(field_mutable:server_client.LogInSignUp.password)
  return _internal_mutable_password();
}
inline const std::string& LogInSignUp::_internal_password() const {
  return password_.GetNoArena();
}
inline void LogInSignUp::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogInSignUp::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server_client.LogInSignUp.password)
}
inline void LogInSignUp::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server_client.LogInSignUp.password)
}
inline void LogInSignUp::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server_client.LogInSignUp.password)
}
inline std::string* LogInSignUp::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogInSignUp::release_password() {
  // @@protoc_insertion_point(field_release:server_client.LogInSignUp.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogInSignUp::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:server_client.LogInSignUp.password)
}

// .server_client.LogInSignUp.Type request_type = 3;
inline void LogInSignUp::clear_request_type() {
  request_type_ = 0;
}
inline ::server_client::LogInSignUp_Type LogInSignUp::_internal_request_type() const {
  return static_cast< ::server_client::LogInSignUp_Type >(request_type_);
}
inline ::server_client::LogInSignUp_Type LogInSignUp::request_type() const {
  // @@protoc_insertion_point(field_get:server_client.LogInSignUp.request_type)
  return _internal_request_type();
}
inline void LogInSignUp::_internal_set_request_type(::server_client::LogInSignUp_Type value) {
  
  request_type_ = value;
}
inline void LogInSignUp::set_request_type(::server_client::LogInSignUp_Type value) {
  _internal_set_request_type(value);
  // @@protoc_insertion_point(field_set:server_client.LogInSignUp.request_type)
}

// -------------------------------------------------------------------

// LogInSignUpResponse

// .server_client.Response status = 1;
inline bool LogInSignUpResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool LogInSignUpResponse::has_status() const {
  return _internal_has_status();
}
inline void LogInSignUpResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::server_client::Response& LogInSignUpResponse::_internal_status() const {
  const ::server_client::Response* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::server_client::Response*>(
      &::server_client::_Response_default_instance_);
}
inline const ::server_client::Response& LogInSignUpResponse::status() const {
  // @@protoc_insertion_point(field_get:server_client.LogInSignUpResponse.status)
  return _internal_status();
}
inline ::server_client::Response* LogInSignUpResponse::release_status() {
  // @@protoc_insertion_point(field_release:server_client.LogInSignUpResponse.status)
  
  ::server_client::Response* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::server_client::Response* LogInSignUpResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::server_client::Response>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::server_client::Response* LogInSignUpResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:server_client.LogInSignUpResponse.status)
  return _internal_mutable_status();
}
inline void LogInSignUpResponse::set_allocated_status(::server_client::Response* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:server_client.LogInSignUpResponse.status)
}

// .server_client.Player player = 2;
inline bool LogInSignUpResponse::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool LogInSignUpResponse::has_player() const {
  return _internal_has_player();
}
inline void LogInSignUpResponse::clear_player() {
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
inline const ::server_client::Player& LogInSignUpResponse::_internal_player() const {
  const ::server_client::Player* p = player_;
  return p != nullptr ? *p : *reinterpret_cast<const ::server_client::Player*>(
      &::server_client::_Player_default_instance_);
}
inline const ::server_client::Player& LogInSignUpResponse::player() const {
  // @@protoc_insertion_point(field_get:server_client.LogInSignUpResponse.player)
  return _internal_player();
}
inline ::server_client::Player* LogInSignUpResponse::release_player() {
  // @@protoc_insertion_point(field_release:server_client.LogInSignUpResponse.player)
  
  ::server_client::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::server_client::Player* LogInSignUpResponse::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::server_client::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  return player_;
}
inline ::server_client::Player* LogInSignUpResponse::mutable_player() {
  // @@protoc_insertion_point(field_mutable:server_client.LogInSignUpResponse.player)
  return _internal_mutable_player();
}
inline void LogInSignUpResponse::set_allocated_player(::server_client::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:server_client.LogInSignUpResponse.player)
}

// bool already_logged = 3;
inline void LogInSignUpResponse::clear_already_logged() {
  already_logged_ = false;
}
inline bool LogInSignUpResponse::_internal_already_logged() const {
  return already_logged_;
}
inline bool LogInSignUpResponse::already_logged() const {
  // @@protoc_insertion_point(field_get:server_client.LogInSignUpResponse.already_logged)
  return _internal_already_logged();
}
inline void LogInSignUpResponse::_internal_set_already_logged(bool value) {
  
  already_logged_ = value;
}
inline void LogInSignUpResponse::set_already_logged(bool value) {
  _internal_set_already_logged(value);
  // @@protoc_insertion_point(field_set:server_client.LogInSignUpResponse.already_logged)
}

// -------------------------------------------------------------------

// Ranking

// .server_client.Response status = 1;
inline bool Ranking::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Ranking::has_status() const {
  return _internal_has_status();
}
inline void Ranking::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::server_client::Response& Ranking::_internal_status() const {
  const ::server_client::Response* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::server_client::Response*>(
      &::server_client::_Response_default_instance_);
}
inline const ::server_client::Response& Ranking::status() const {
  // @@protoc_insertion_point(field_get:server_client.Ranking.status)
  return _internal_status();
}
inline ::server_client::Response* Ranking::release_status() {
  // @@protoc_insertion_point(field_release:server_client.Ranking.status)
  
  ::server_client::Response* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::server_client::Response* Ranking::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::server_client::Response>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::server_client::Response* Ranking::mutable_status() {
  // @@protoc_insertion_point(field_mutable:server_client.Ranking.status)
  return _internal_mutable_status();
}
inline void Ranking::set_allocated_status(::server_client::Response* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:server_client.Ranking.status)
}

// repeated .server_client.Player players = 2;
inline int Ranking::_internal_players_size() const {
  return players_.size();
}
inline int Ranking::players_size() const {
  return _internal_players_size();
}
inline void Ranking::clear_players() {
  players_.Clear();
}
inline ::server_client::Player* Ranking::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:server_client.Ranking.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server_client::Player >*
Ranking::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:server_client.Ranking.players)
  return &players_;
}
inline const ::server_client::Player& Ranking::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::server_client::Player& Ranking::players(int index) const {
  // @@protoc_insertion_point(field_get:server_client.Ranking.players)
  return _internal_players(index);
}
inline ::server_client::Player* Ranking::_internal_add_players() {
  return players_.Add();
}
inline ::server_client::Player* Ranking::add_players() {
  // @@protoc_insertion_point(field_add:server_client.Ranking.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server_client::Player >&
Ranking::players() const {
  // @@protoc_insertion_point(field_list:server_client.Ranking.players)
  return players_;
}

// -------------------------------------------------------------------

// Play

// .server_client.Play.Type request_type = 1;
inline void Play::clear_request_type() {
  request_type_ = 0;
}
inline ::server_client::Play_Type Play::_internal_request_type() const {
  return static_cast< ::server_client::Play_Type >(request_type_);
}
inline ::server_client::Play_Type Play::request_type() const {
  // @@protoc_insertion_point(field_get:server_client.Play.request_type)
  return _internal_request_type();
}
inline void Play::_internal_set_request_type(::server_client::Play_Type value) {
  
  request_type_ = value;
}
inline void Play::set_request_type(::server_client::Play_Type value) {
  _internal_set_request_type(value);
  // @@protoc_insertion_point(field_set:server_client.Play.request_type)
}

// .server_client.Player challended_player = 2;
inline bool Play::_internal_has_challended_player() const {
  return this != internal_default_instance() && challended_player_ != nullptr;
}
inline bool Play::has_challended_player() const {
  return _internal_has_challended_player();
}
inline void Play::clear_challended_player() {
  if (GetArenaNoVirtual() == nullptr && challended_player_ != nullptr) {
    delete challended_player_;
  }
  challended_player_ = nullptr;
}
inline const ::server_client::Player& Play::_internal_challended_player() const {
  const ::server_client::Player* p = challended_player_;
  return p != nullptr ? *p : *reinterpret_cast<const ::server_client::Player*>(
      &::server_client::_Player_default_instance_);
}
inline const ::server_client::Player& Play::challended_player() const {
  // @@protoc_insertion_point(field_get:server_client.Play.challended_player)
  return _internal_challended_player();
}
inline ::server_client::Player* Play::release_challended_player() {
  // @@protoc_insertion_point(field_release:server_client.Play.challended_player)
  
  ::server_client::Player* temp = challended_player_;
  challended_player_ = nullptr;
  return temp;
}
inline ::server_client::Player* Play::_internal_mutable_challended_player() {
  
  if (challended_player_ == nullptr) {
    auto* p = CreateMaybeMessage<::server_client::Player>(GetArenaNoVirtual());
    challended_player_ = p;
  }
  return challended_player_;
}
inline ::server_client::Player* Play::mutable_challended_player() {
  // @@protoc_insertion_point(field_mutable:server_client.Play.challended_player)
  return _internal_mutable_challended_player();
}
inline void Play::set_allocated_challended_player(::server_client::Player* challended_player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete challended_player_;
  }
  if (challended_player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      challended_player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, challended_player, submessage_arena);
    }
    
  } else {
    
  }
  challended_player_ = challended_player;
  // @@protoc_insertion_point(field_set_allocated:server_client.Play.challended_player)
}

// -------------------------------------------------------------------

// GameResult

// .server_client.GameResult.Result result = 1;
inline void GameResult::clear_result() {
  result_ = 0;
}
inline ::server_client::GameResult_Result GameResult::_internal_result() const {
  return static_cast< ::server_client::GameResult_Result >(result_);
}
inline ::server_client::GameResult_Result GameResult::result() const {
  // @@protoc_insertion_point(field_get:server_client.GameResult.result)
  return _internal_result();
}
inline void GameResult::_internal_set_result(::server_client::GameResult_Result value) {
  
  result_ = value;
}
inline void GameResult::set_result(::server_client::GameResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:server_client.GameResult.result)
}

// .server_client.GameResult.Winner winner = 2;
inline void GameResult::clear_winner() {
  winner_ = 0;
}
inline ::server_client::GameResult_Winner GameResult::_internal_winner() const {
  return static_cast< ::server_client::GameResult_Winner >(winner_);
}
inline ::server_client::GameResult_Winner GameResult::winner() const {
  // @@protoc_insertion_point(field_get:server_client.GameResult.winner)
  return _internal_winner();
}
inline void GameResult::_internal_set_winner(::server_client::GameResult_Winner value) {
  
  winner_ = value;
}
inline void GameResult::set_winner(::server_client::GameResult_Winner value) {
  _internal_set_winner(value);
  // @@protoc_insertion_point(field_set:server_client.GameResult.winner)
}

// -------------------------------------------------------------------

// Keep

// .server_client.Keep.Type type = 1;
inline void Keep::clear_type() {
  type_ = 0;
}
inline ::server_client::Keep_Type Keep::_internal_type() const {
  return static_cast< ::server_client::Keep_Type >(type_);
}
inline ::server_client::Keep_Type Keep::type() const {
  // @@protoc_insertion_point(field_get:server_client.Keep.type)
  return _internal_type();
}
inline void Keep::_internal_set_type(::server_client::Keep_Type value) {
  
  type_ = value;
}
inline void Keep::set_type(::server_client::Keep_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:server_client.Keep.type)
}

// -------------------------------------------------------------------

// ChallengeRequest

// .server_client.Player challender_player = 1;
inline bool ChallengeRequest::_internal_has_challender_player() const {
  return this != internal_default_instance() && challender_player_ != nullptr;
}
inline bool ChallengeRequest::has_challender_player() const {
  return _internal_has_challender_player();
}
inline void ChallengeRequest::clear_challender_player() {
  if (GetArenaNoVirtual() == nullptr && challender_player_ != nullptr) {
    delete challender_player_;
  }
  challender_player_ = nullptr;
}
inline const ::server_client::Player& ChallengeRequest::_internal_challender_player() const {
  const ::server_client::Player* p = challender_player_;
  return p != nullptr ? *p : *reinterpret_cast<const ::server_client::Player*>(
      &::server_client::_Player_default_instance_);
}
inline const ::server_client::Player& ChallengeRequest::challender_player() const {
  // @@protoc_insertion_point(field_get:server_client.ChallengeRequest.challender_player)
  return _internal_challender_player();
}
inline ::server_client::Player* ChallengeRequest::release_challender_player() {
  // @@protoc_insertion_point(field_release:server_client.ChallengeRequest.challender_player)
  
  ::server_client::Player* temp = challender_player_;
  challender_player_ = nullptr;
  return temp;
}
inline ::server_client::Player* ChallengeRequest::_internal_mutable_challender_player() {
  
  if (challender_player_ == nullptr) {
    auto* p = CreateMaybeMessage<::server_client::Player>(GetArenaNoVirtual());
    challender_player_ = p;
  }
  return challender_player_;
}
inline ::server_client::Player* ChallengeRequest::mutable_challender_player() {
  // @@protoc_insertion_point(field_mutable:server_client.ChallengeRequest.challender_player)
  return _internal_mutable_challender_player();
}
inline void ChallengeRequest::set_allocated_challender_player(::server_client::Player* challender_player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete challender_player_;
  }
  if (challender_player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      challender_player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, challender_player, submessage_arena);
    }
    
  } else {
    
  }
  challender_player_ = challender_player;
  // @@protoc_insertion_point(field_set_allocated:server_client.ChallengeRequest.challender_player)
}

// -------------------------------------------------------------------

// ChallengeResponse

// .server_client.ChallengeResponse.Answer answer = 1;
inline void ChallengeResponse::clear_answer() {
  answer_ = 0;
}
inline ::server_client::ChallengeResponse_Answer ChallengeResponse::_internal_answer() const {
  return static_cast< ::server_client::ChallengeResponse_Answer >(answer_);
}
inline ::server_client::ChallengeResponse_Answer ChallengeResponse::answer() const {
  // @@protoc_insertion_point(field_get:server_client.ChallengeResponse.answer)
  return _internal_answer();
}
inline void ChallengeResponse::_internal_set_answer(::server_client::ChallengeResponse_Answer value) {
  
  answer_ = value;
}
inline void ChallengeResponse::set_answer(::server_client::ChallengeResponse_Answer value) {
  _internal_set_answer(value);
  // @@protoc_insertion_point(field_set:server_client.ChallengeResponse.answer)
}

// -------------------------------------------------------------------

// View

// .server_client.Response status = 1;
inline bool View::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool View::has_status() const {
  return _internal_has_status();
}
inline void View::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::server_client::Response& View::_internal_status() const {
  const ::server_client::Response* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::server_client::Response*>(
      &::server_client::_Response_default_instance_);
}
inline const ::server_client::Response& View::status() const {
  // @@protoc_insertion_point(field_get:server_client.View.status)
  return _internal_status();
}
inline ::server_client::Response* View::release_status() {
  // @@protoc_insertion_point(field_release:server_client.View.status)
  
  ::server_client::Response* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::server_client::Response* View::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::server_client::Response>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::server_client::Response* View::mutable_status() {
  // @@protoc_insertion_point(field_mutable:server_client.View.status)
  return _internal_mutable_status();
}
inline void View::set_allocated_status(::server_client::Response* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:server_client.View.status)
}

// .server_client.Player player = 2;
inline bool View::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool View::has_player() const {
  return _internal_has_player();
}
inline void View::clear_player() {
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
inline const ::server_client::Player& View::_internal_player() const {
  const ::server_client::Player* p = player_;
  return p != nullptr ? *p : *reinterpret_cast<const ::server_client::Player*>(
      &::server_client::_Player_default_instance_);
}
inline const ::server_client::Player& View::player() const {
  // @@protoc_insertion_point(field_get:server_client.View.player)
  return _internal_player();
}
inline ::server_client::Player* View::release_player() {
  // @@protoc_insertion_point(field_release:server_client.View.player)
  
  ::server_client::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::server_client::Player* View::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::server_client::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  return player_;
}
inline ::server_client::Player* View::mutable_player() {
  // @@protoc_insertion_point(field_mutable:server_client.View.player)
  return _internal_mutable_player();
}
inline void View::set_allocated_player(::server_client::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:server_client.View.player)
}

// -------------------------------------------------------------------

// OnlinePlayers

// .server_client.Response status = 1;
inline bool OnlinePlayers::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool OnlinePlayers::has_status() const {
  return _internal_has_status();
}
inline void OnlinePlayers::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::server_client::Response& OnlinePlayers::_internal_status() const {
  const ::server_client::Response* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::server_client::Response*>(
      &::server_client::_Response_default_instance_);
}
inline const ::server_client::Response& OnlinePlayers::status() const {
  // @@protoc_insertion_point(field_get:server_client.OnlinePlayers.status)
  return _internal_status();
}
inline ::server_client::Response* OnlinePlayers::release_status() {
  // @@protoc_insertion_point(field_release:server_client.OnlinePlayers.status)
  
  ::server_client::Response* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::server_client::Response* OnlinePlayers::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::server_client::Response>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::server_client::Response* OnlinePlayers::mutable_status() {
  // @@protoc_insertion_point(field_mutable:server_client.OnlinePlayers.status)
  return _internal_mutable_status();
}
inline void OnlinePlayers::set_allocated_status(::server_client::Response* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:server_client.OnlinePlayers.status)
}

// repeated .server_client.Player players = 2;
inline int OnlinePlayers::_internal_players_size() const {
  return players_.size();
}
inline int OnlinePlayers::players_size() const {
  return _internal_players_size();
}
inline void OnlinePlayers::clear_players() {
  players_.Clear();
}
inline ::server_client::Player* OnlinePlayers::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:server_client.OnlinePlayers.players)
  return players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server_client::Player >*
OnlinePlayers::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:server_client.OnlinePlayers.players)
  return &players_;
}
inline const ::server_client::Player& OnlinePlayers::_internal_players(int index) const {
  return players_.Get(index);
}
inline const ::server_client::Player& OnlinePlayers::players(int index) const {
  // @@protoc_insertion_point(field_get:server_client.OnlinePlayers.players)
  return _internal_players(index);
}
inline ::server_client::Player* OnlinePlayers::_internal_add_players() {
  return players_.Add();
}
inline ::server_client::Player* OnlinePlayers::add_players() {
  // @@protoc_insertion_point(field_add:server_client.OnlinePlayers.players)
  return _internal_add_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server_client::Player >&
OnlinePlayers::players() const {
  // @@protoc_insertion_point(field_list:server_client.OnlinePlayers.players)
  return players_;
}

// -------------------------------------------------------------------

// Change

// string username = 1;
inline void Change::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Change::username() const {
  // @@protoc_insertion_point(field_get:server_client.Change.username)
  return _internal_username();
}
inline void Change::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:server_client.Change.username)
}
inline std::string* Change::mutable_username() {
  // @@protoc_insertion_point(field_mutable:server_client.Change.username)
  return _internal_mutable_username();
}
inline const std::string& Change::_internal_username() const {
  return username_.GetNoArena();
}
inline void Change::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Change::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server_client.Change.username)
}
inline void Change::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server_client.Change.username)
}
inline void Change::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server_client.Change.username)
}
inline std::string* Change::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Change::release_username() {
  // @@protoc_insertion_point(field_release:server_client.Change.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Change::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:server_client.Change.username)
}

// string password = 2;
inline void Change::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Change::password() const {
  // @@protoc_insertion_point(field_get:server_client.Change.password)
  return _internal_password();
}
inline void Change::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:server_client.Change.password)
}
inline std::string* Change::mutable_password() {
  // @@protoc_insertion_point(field_mutable:server_client.Change.password)
  return _internal_mutable_password();
}
inline const std::string& Change::_internal_password() const {
  return password_.GetNoArena();
}
inline void Change::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Change::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server_client.Change.password)
}
inline void Change::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server_client.Change.password)
}
inline void Change::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server_client.Change.password)
}
inline std::string* Change::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Change::release_password() {
  // @@protoc_insertion_point(field_release:server_client.Change.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Change::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:server_client.Change.password)
}

// -------------------------------------------------------------------

// ChangesResponse

// .server_client.Response status = 1;
inline bool ChangesResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ChangesResponse::has_status() const {
  return _internal_has_status();
}
inline void ChangesResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::server_client::Response& ChangesResponse::_internal_status() const {
  const ::server_client::Response* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::server_client::Response*>(
      &::server_client::_Response_default_instance_);
}
inline const ::server_client::Response& ChangesResponse::status() const {
  // @@protoc_insertion_point(field_get:server_client.ChangesResponse.status)
  return _internal_status();
}
inline ::server_client::Response* ChangesResponse::release_status() {
  // @@protoc_insertion_point(field_release:server_client.ChangesResponse.status)
  
  ::server_client::Response* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::server_client::Response* ChangesResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::server_client::Response>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::server_client::Response* ChangesResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:server_client.ChangesResponse.status)
  return _internal_mutable_status();
}
inline void ChangesResponse::set_allocated_status(::server_client::Response* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:server_client.ChangesResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace server_client

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::server_client::Operation_Request> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server_client::Operation_Request>() {
  return ::server_client::Operation_Request_descriptor();
}
template <> struct is_proto_enum< ::server_client::LogInSignUp_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server_client::LogInSignUp_Type>() {
  return ::server_client::LogInSignUp_Type_descriptor();
}
template <> struct is_proto_enum< ::server_client::Play_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server_client::Play_Type>() {
  return ::server_client::Play_Type_descriptor();
}
template <> struct is_proto_enum< ::server_client::GameResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server_client::GameResult_Result>() {
  return ::server_client::GameResult_Result_descriptor();
}
template <> struct is_proto_enum< ::server_client::GameResult_Winner> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server_client::GameResult_Winner>() {
  return ::server_client::GameResult_Winner_descriptor();
}
template <> struct is_proto_enum< ::server_client::Keep_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server_client::Keep_Type>() {
  return ::server_client::Keep_Type_descriptor();
}
template <> struct is_proto_enum< ::server_client::ChallengeResponse_Answer> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server_client::ChallengeResponse_Answer>() {
  return ::server_client::ChallengeResponse_Answer_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_client_5fserver_2eproto
