// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: in_game.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_in_5fgame_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_in_5fgame_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_in_5fgame_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_in_5fgame_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_in_5fgame_2eproto;
namespace in_game {
class Exit;
class ExitDefaultTypeInternal;
extern ExitDefaultTypeInternal _Exit_default_instance_;
class ExitAlert;
class ExitAlertDefaultTypeInternal;
extern ExitAlertDefaultTypeInternal _ExitAlert_default_instance_;
class Hit;
class HitDefaultTypeInternal;
extern HitDefaultTypeInternal _Hit_default_instance_;
class Player;
class PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class Result;
class ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class State;
class StateDefaultTypeInternal;
extern StateDefaultTypeInternal _State_default_instance_;
}  // namespace in_game
PROTOBUF_NAMESPACE_OPEN
template<> ::in_game::Exit* Arena::CreateMaybeMessage<::in_game::Exit>(Arena*);
template<> ::in_game::ExitAlert* Arena::CreateMaybeMessage<::in_game::ExitAlert>(Arena*);
template<> ::in_game::Hit* Arena::CreateMaybeMessage<::in_game::Hit>(Arena*);
template<> ::in_game::Player* Arena::CreateMaybeMessage<::in_game::Player>(Arena*);
template<> ::in_game::Position* Arena::CreateMaybeMessage<::in_game::Position>(Arena*);
template<> ::in_game::Response* Arena::CreateMaybeMessage<::in_game::Response>(Arena*);
template<> ::in_game::Result* Arena::CreateMaybeMessage<::in_game::Result>(Arena*);
template<> ::in_game::State* Arena::CreateMaybeMessage<::in_game::State>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace in_game {

enum Position_ValueType : int {
  Position_ValueType_NONE = 0,
  Position_ValueType_X = 1,
  Position_ValueType_O = 2,
  Position_ValueType_Position_ValueType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Position_ValueType_Position_ValueType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Position_ValueType_IsValid(int value);
constexpr Position_ValueType Position_ValueType_ValueType_MIN = Position_ValueType_NONE;
constexpr Position_ValueType Position_ValueType_ValueType_MAX = Position_ValueType_O;
constexpr int Position_ValueType_ValueType_ARRAYSIZE = Position_ValueType_ValueType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Position_ValueType_descriptor();
template<typename T>
inline const std::string& Position_ValueType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Position_ValueType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Position_ValueType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Position_ValueType_descriptor(), enum_t_value);
}
inline bool Position_ValueType_Parse(
    const std::string& name, Position_ValueType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Position_ValueType>(
    Position_ValueType_descriptor(), name, value);
}
enum Result_Tieds : int {
  Result_Tieds_WINNER = 0,
  Result_Tieds_TIEDS = 1,
  Result_Tieds_Result_Tieds_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Result_Tieds_Result_Tieds_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Result_Tieds_IsValid(int value);
constexpr Result_Tieds Result_Tieds_Tieds_MIN = Result_Tieds_WINNER;
constexpr Result_Tieds Result_Tieds_Tieds_MAX = Result_Tieds_TIEDS;
constexpr int Result_Tieds_Tieds_ARRAYSIZE = Result_Tieds_Tieds_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Result_Tieds_descriptor();
template<typename T>
inline const std::string& Result_Tieds_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Result_Tieds>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Result_Tieds_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Result_Tieds_descriptor(), enum_t_value);
}
inline bool Result_Tieds_Parse(
    const std::string& name, Result_Tieds* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Result_Tieds>(
    Result_Tieds_descriptor(), name, value);
}
enum Result_Winner : int {
  Result_Winner_PLAYER1 = 0,
  Result_Winner_PLAYER2 = 1,
  Result_Winner_Result_Winner_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Result_Winner_Result_Winner_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Result_Winner_IsValid(int value);
constexpr Result_Winner Result_Winner_Winner_MIN = Result_Winner_PLAYER1;
constexpr Result_Winner Result_Winner_Winner_MAX = Result_Winner_PLAYER2;
constexpr int Result_Winner_Winner_ARRAYSIZE = Result_Winner_Winner_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Result_Winner_descriptor();
template<typename T>
inline const std::string& Result_Winner_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Result_Winner>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Result_Winner_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Result_Winner_descriptor(), enum_t_value);
}
inline bool Result_Winner_Parse(
    const std::string& name, Result_Winner* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Result_Winner>(
    Result_Winner_descriptor(), name, value);
}
// ===================================================================

class Player :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:in_game.Player) */ {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return CreateMaybeMessage<Player>(nullptr);
  }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "in_game.Player";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_in_5fgame_2eproto);
    return ::descriptor_table_in_5fgame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:in_game.Player)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_in_5fgame_2eproto;
};
// -------------------------------------------------------------------

class Position :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:in_game.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "in_game.Position";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_in_5fgame_2eproto);
    return ::descriptor_table_in_5fgame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Position_ValueType ValueType;
  static constexpr ValueType NONE =
    Position_ValueType_NONE;
  static constexpr ValueType X =
    Position_ValueType_X;
  static constexpr ValueType O =
    Position_ValueType_O;
  static inline bool ValueType_IsValid(int value) {
    return Position_ValueType_IsValid(value);
  }
  static constexpr ValueType ValueType_MIN =
    Position_ValueType_ValueType_MIN;
  static constexpr ValueType ValueType_MAX =
    Position_ValueType_ValueType_MAX;
  static constexpr int ValueType_ARRAYSIZE =
    Position_ValueType_ValueType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ValueType_descriptor() {
    return Position_ValueType_descriptor();
  }
  template<typename T>
  static inline const std::string& ValueType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ValueType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ValueType_Name.");
    return Position_ValueType_Name(enum_t_value);
  }
  static inline bool ValueType_Parse(const std::string& name,
      ValueType* value) {
    return Position_ValueType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kLineFieldNumber = 1,
    kColumnFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // int32 line = 1;
  void clear_line();
  ::PROTOBUF_NAMESPACE_ID::int32 line() const;
  void set_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_line() const;
  void _internal_set_line(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 column = 2;
  void clear_column();
  ::PROTOBUF_NAMESPACE_ID::int32 column() const;
  void set_column(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_column() const;
  void _internal_set_column(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .in_game.Position.ValueType value = 3;
  void clear_value();
  ::in_game::Position_ValueType value() const;
  void set_value(::in_game::Position_ValueType value);
  private:
  ::in_game::Position_ValueType _internal_value() const;
  void _internal_set_value(::in_game::Position_ValueType value);
  public:

  // @@protoc_insertion_point(class_scope:in_game.Position)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 line_;
  ::PROTOBUF_NAMESPACE_ID::int32 column_;
  int value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_in_5fgame_2eproto;
};
// -------------------------------------------------------------------

class Hit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:in_game.Hit) */ {
 public:
  Hit();
  virtual ~Hit();

  Hit(const Hit& from);
  Hit(Hit&& from) noexcept
    : Hit() {
    *this = ::std::move(from);
  }

  inline Hit& operator=(const Hit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hit& operator=(Hit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Hit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hit* internal_default_instance() {
    return reinterpret_cast<const Hit*>(
               &_Hit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Hit& a, Hit& b) {
    a.Swap(&b);
  }
  inline void Swap(Hit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Hit* New() const final {
    return CreateMaybeMessage<Hit>(nullptr);
  }

  Hit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Hit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Hit& from);
  void MergeFrom(const Hit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "in_game.Hit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_in_5fgame_2eproto);
    return ::descriptor_table_in_5fgame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kPlayerFieldNumber = 2,
  };
  // .in_game.Position position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::in_game::Position& position() const;
  ::in_game::Position* release_position();
  ::in_game::Position* mutable_position();
  void set_allocated_position(::in_game::Position* position);
  private:
  const ::in_game::Position& _internal_position() const;
  ::in_game::Position* _internal_mutable_position();
  public:

  // .in_game.Player player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::in_game::Player& player() const;
  ::in_game::Player* release_player();
  ::in_game::Player* mutable_player();
  void set_allocated_player(::in_game::Player* player);
  private:
  const ::in_game::Player& _internal_player() const;
  ::in_game::Player* _internal_mutable_player();
  public:

  // @@protoc_insertion_point(class_scope:in_game.Hit)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::in_game::Position* position_;
  ::in_game::Player* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_in_5fgame_2eproto;
};
// -------------------------------------------------------------------

class Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:in_game.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "in_game.Response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_in_5fgame_2eproto);
    return ::descriptor_table_in_5fgame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStatusCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 status_code = 1;
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:in_game.Response)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_in_5fgame_2eproto;
};
// -------------------------------------------------------------------

class State :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:in_game.State) */ {
 public:
  State();
  virtual ~State();

  State(const State& from);
  State(State&& from) noexcept
    : State() {
    *this = ::std::move(from);
  }

  inline State& operator=(const State& from) {
    CopyFrom(from);
    return *this;
  }
  inline State& operator=(State&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const State& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const State* internal_default_instance() {
    return reinterpret_cast<const State*>(
               &_State_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(State& a, State& b) {
    a.Swap(&b);
  }
  inline void Swap(State* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline State* New() const final {
    return CreateMaybeMessage<State>(nullptr);
  }

  State* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<State>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const State& from);
  void MergeFrom(const State& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(State* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "in_game.State";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_in_5fgame_2eproto);
    return ::descriptor_table_in_5fgame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
    kTurnFieldNumber = 2,
    kFinishedFieldNumber = 3,
  };
  // repeated .in_game.Position elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::in_game::Position* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_game::Position >*
      mutable_elements();
  private:
  const ::in_game::Position& _internal_elements(int index) const;
  ::in_game::Position* _internal_add_elements();
  public:
  const ::in_game::Position& elements(int index) const;
  ::in_game::Position* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_game::Position >&
      elements() const;

  // bool turn = 2;
  void clear_turn();
  bool turn() const;
  void set_turn(bool value);
  private:
  bool _internal_turn() const;
  void _internal_set_turn(bool value);
  public:

  // bool finished = 3;
  void clear_finished();
  bool finished() const;
  void set_finished(bool value);
  private:
  bool _internal_finished() const;
  void _internal_set_finished(bool value);
  public:

  // @@protoc_insertion_point(class_scope:in_game.State)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_game::Position > elements_;
  bool turn_;
  bool finished_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_in_5fgame_2eproto;
};
// -------------------------------------------------------------------

class Result :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:in_game.Result) */ {
 public:
  Result();
  virtual ~Result();

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Result& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Result* New() const final {
    return CreateMaybeMessage<Result>(nullptr);
  }

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Result& from);
  void MergeFrom(const Result& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "in_game.Result";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_in_5fgame_2eproto);
    return ::descriptor_table_in_5fgame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Result_Tieds Tieds;
  static constexpr Tieds WINNER =
    Result_Tieds_WINNER;
  static constexpr Tieds TIEDS =
    Result_Tieds_TIEDS;
  static inline bool Tieds_IsValid(int value) {
    return Result_Tieds_IsValid(value);
  }
  static constexpr Tieds Tieds_MIN =
    Result_Tieds_Tieds_MIN;
  static constexpr Tieds Tieds_MAX =
    Result_Tieds_Tieds_MAX;
  static constexpr int Tieds_ARRAYSIZE =
    Result_Tieds_Tieds_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Tieds_descriptor() {
    return Result_Tieds_descriptor();
  }
  template<typename T>
  static inline const std::string& Tieds_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Tieds>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Tieds_Name.");
    return Result_Tieds_Name(enum_t_value);
  }
  static inline bool Tieds_Parse(const std::string& name,
      Tieds* value) {
    return Result_Tieds_Parse(name, value);
  }

  typedef Result_Winner Winner;
  static constexpr Winner PLAYER1 =
    Result_Winner_PLAYER1;
  static constexpr Winner PLAYER2 =
    Result_Winner_PLAYER2;
  static inline bool Winner_IsValid(int value) {
    return Result_Winner_IsValid(value);
  }
  static constexpr Winner Winner_MIN =
    Result_Winner_Winner_MIN;
  static constexpr Winner Winner_MAX =
    Result_Winner_Winner_MAX;
  static constexpr int Winner_ARRAYSIZE =
    Result_Winner_Winner_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Winner_descriptor() {
    return Result_Winner_descriptor();
  }
  template<typename T>
  static inline const std::string& Winner_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Winner>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Winner_Name.");
    return Result_Winner_Name(enum_t_value);
  }
  static inline bool Winner_Parse(const std::string& name,
      Winner* value) {
    return Result_Winner_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 3,
    kResultFieldNumber = 1,
    kWinnerFieldNumber = 2,
  };
  // string username = 3;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .in_game.Result.Tieds result = 1;
  void clear_result();
  ::in_game::Result_Tieds result() const;
  void set_result(::in_game::Result_Tieds value);
  private:
  ::in_game::Result_Tieds _internal_result() const;
  void _internal_set_result(::in_game::Result_Tieds value);
  public:

  // .in_game.Result.Winner winner = 2;
  void clear_winner();
  ::in_game::Result_Winner winner() const;
  void set_winner(::in_game::Result_Winner value);
  private:
  ::in_game::Result_Winner _internal_winner() const;
  void _internal_set_winner(::in_game::Result_Winner value);
  public:

  // @@protoc_insertion_point(class_scope:in_game.Result)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  int result_;
  int winner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_in_5fgame_2eproto;
};
// -------------------------------------------------------------------

class Exit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:in_game.Exit) */ {
 public:
  Exit();
  virtual ~Exit();

  Exit(const Exit& from);
  Exit(Exit&& from) noexcept
    : Exit() {
    *this = ::std::move(from);
  }

  inline Exit& operator=(const Exit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Exit& operator=(Exit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Exit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Exit* internal_default_instance() {
    return reinterpret_cast<const Exit*>(
               &_Exit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Exit& a, Exit& b) {
    a.Swap(&b);
  }
  inline void Swap(Exit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Exit* New() const final {
    return CreateMaybeMessage<Exit>(nullptr);
  }

  Exit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Exit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Exit& from);
  void MergeFrom(const Exit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Exit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "in_game.Exit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_in_5fgame_2eproto);
    return ::descriptor_table_in_5fgame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 1,
  };
  // .in_game.Player player = 1;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::in_game::Player& player() const;
  ::in_game::Player* release_player();
  ::in_game::Player* mutable_player();
  void set_allocated_player(::in_game::Player* player);
  private:
  const ::in_game::Player& _internal_player() const;
  ::in_game::Player* _internal_mutable_player();
  public:

  // @@protoc_insertion_point(class_scope:in_game.Exit)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::in_game::Player* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_in_5fgame_2eproto;
};
// -------------------------------------------------------------------

class ExitAlert :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:in_game.ExitAlert) */ {
 public:
  ExitAlert();
  virtual ~ExitAlert();

  ExitAlert(const ExitAlert& from);
  ExitAlert(ExitAlert&& from) noexcept
    : ExitAlert() {
    *this = ::std::move(from);
  }

  inline ExitAlert& operator=(const ExitAlert& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExitAlert& operator=(ExitAlert&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExitAlert& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExitAlert* internal_default_instance() {
    return reinterpret_cast<const ExitAlert*>(
               &_ExitAlert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ExitAlert& a, ExitAlert& b) {
    a.Swap(&b);
  }
  inline void Swap(ExitAlert* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExitAlert* New() const final {
    return CreateMaybeMessage<ExitAlert>(nullptr);
  }

  ExitAlert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExitAlert>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExitAlert& from);
  void MergeFrom(const ExitAlert& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExitAlert* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "in_game.ExitAlert";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_in_5fgame_2eproto);
    return ::descriptor_table_in_5fgame_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kPlayerFieldNumber = 2,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .in_game.Player player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::in_game::Player& player() const;
  ::in_game::Player* release_player();
  ::in_game::Player* mutable_player();
  void set_allocated_player(::in_game::Player* player);
  private:
  const ::in_game::Player& _internal_player() const;
  ::in_game::Player* _internal_mutable_player();
  public:

  // @@protoc_insertion_point(class_scope:in_game.ExitAlert)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::in_game::Player* player_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_in_5fgame_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Player

// uint64 id = 1;
inline void Player::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Player::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Player::id() const {
  // @@protoc_insertion_point(field_get:in_game.Player.id)
  return _internal_id();
}
inline void Player::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Player::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:in_game.Player.id)
}

// string username = 2;
inline void Player::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Player::username() const {
  // @@protoc_insertion_point(field_get:in_game.Player.username)
  return _internal_username();
}
inline void Player::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:in_game.Player.username)
}
inline std::string* Player::mutable_username() {
  // @@protoc_insertion_point(field_mutable:in_game.Player.username)
  return _internal_mutable_username();
}
inline const std::string& Player::_internal_username() const {
  return username_.GetNoArena();
}
inline void Player::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Player::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:in_game.Player.username)
}
inline void Player::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:in_game.Player.username)
}
inline void Player::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:in_game.Player.username)
}
inline std::string* Player::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Player::release_username() {
  // @@protoc_insertion_point(field_release:in_game.Player.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:in_game.Player.username)
}

// -------------------------------------------------------------------

// Position

// int32 line = 1;
inline void Position::clear_line() {
  line_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Position::_internal_line() const {
  return line_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Position::line() const {
  // @@protoc_insertion_point(field_get:in_game.Position.line)
  return _internal_line();
}
inline void Position::_internal_set_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  line_ = value;
}
inline void Position::set_line(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:in_game.Position.line)
}

// int32 column = 2;
inline void Position::clear_column() {
  column_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Position::_internal_column() const {
  return column_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Position::column() const {
  // @@protoc_insertion_point(field_get:in_game.Position.column)
  return _internal_column();
}
inline void Position::_internal_set_column(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  column_ = value;
}
inline void Position::set_column(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:in_game.Position.column)
}

// .in_game.Position.ValueType value = 3;
inline void Position::clear_value() {
  value_ = 0;
}
inline ::in_game::Position_ValueType Position::_internal_value() const {
  return static_cast< ::in_game::Position_ValueType >(value_);
}
inline ::in_game::Position_ValueType Position::value() const {
  // @@protoc_insertion_point(field_get:in_game.Position.value)
  return _internal_value();
}
inline void Position::_internal_set_value(::in_game::Position_ValueType value) {
  
  value_ = value;
}
inline void Position::set_value(::in_game::Position_ValueType value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:in_game.Position.value)
}

// -------------------------------------------------------------------

// Hit

// .in_game.Position position = 1;
inline bool Hit::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Hit::has_position() const {
  return _internal_has_position();
}
inline void Hit::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::in_game::Position& Hit::_internal_position() const {
  const ::in_game::Position* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::in_game::Position*>(
      &::in_game::_Position_default_instance_);
}
inline const ::in_game::Position& Hit::position() const {
  // @@protoc_insertion_point(field_get:in_game.Hit.position)
  return _internal_position();
}
inline ::in_game::Position* Hit::release_position() {
  // @@protoc_insertion_point(field_release:in_game.Hit.position)
  
  ::in_game::Position* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::in_game::Position* Hit::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::in_game::Position>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::in_game::Position* Hit::mutable_position() {
  // @@protoc_insertion_point(field_mutable:in_game.Hit.position)
  return _internal_mutable_position();
}
inline void Hit::set_allocated_position(::in_game::Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:in_game.Hit.position)
}

// .in_game.Player player = 2;
inline bool Hit::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool Hit::has_player() const {
  return _internal_has_player();
}
inline void Hit::clear_player() {
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
inline const ::in_game::Player& Hit::_internal_player() const {
  const ::in_game::Player* p = player_;
  return p != nullptr ? *p : *reinterpret_cast<const ::in_game::Player*>(
      &::in_game::_Player_default_instance_);
}
inline const ::in_game::Player& Hit::player() const {
  // @@protoc_insertion_point(field_get:in_game.Hit.player)
  return _internal_player();
}
inline ::in_game::Player* Hit::release_player() {
  // @@protoc_insertion_point(field_release:in_game.Hit.player)
  
  ::in_game::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::in_game::Player* Hit::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::in_game::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  return player_;
}
inline ::in_game::Player* Hit::mutable_player() {
  // @@protoc_insertion_point(field_mutable:in_game.Hit.player)
  return _internal_mutable_player();
}
inline void Hit::set_allocated_player(::in_game::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:in_game.Hit.player)
}

// -------------------------------------------------------------------

// Response

// int32 status_code = 1;
inline void Response::clear_status_code() {
  status_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::status_code() const {
  // @@protoc_insertion_point(field_get:in_game.Response.status_code)
  return _internal_status_code();
}
inline void Response::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_code_ = value;
}
inline void Response::set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:in_game.Response.status_code)
}

// string message = 2;
inline void Response::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Response::message() const {
  // @@protoc_insertion_point(field_get:in_game.Response.message)
  return _internal_message();
}
inline void Response::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:in_game.Response.message)
}
inline std::string* Response::mutable_message() {
  // @@protoc_insertion_point(field_mutable:in_game.Response.message)
  return _internal_mutable_message();
}
inline const std::string& Response::_internal_message() const {
  return message_.GetNoArena();
}
inline void Response::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Response::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:in_game.Response.message)
}
inline void Response::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:in_game.Response.message)
}
inline void Response::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:in_game.Response.message)
}
inline std::string* Response::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Response::release_message() {
  // @@protoc_insertion_point(field_release:in_game.Response.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:in_game.Response.message)
}

// -------------------------------------------------------------------

// State

// repeated .in_game.Position elements = 1;
inline int State::_internal_elements_size() const {
  return elements_.size();
}
inline int State::elements_size() const {
  return _internal_elements_size();
}
inline void State::clear_elements() {
  elements_.Clear();
}
inline ::in_game::Position* State::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:in_game.State.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_game::Position >*
State::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:in_game.State.elements)
  return &elements_;
}
inline const ::in_game::Position& State::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::in_game::Position& State::elements(int index) const {
  // @@protoc_insertion_point(field_get:in_game.State.elements)
  return _internal_elements(index);
}
inline ::in_game::Position* State::_internal_add_elements() {
  return elements_.Add();
}
inline ::in_game::Position* State::add_elements() {
  // @@protoc_insertion_point(field_add:in_game.State.elements)
  return _internal_add_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::in_game::Position >&
State::elements() const {
  // @@protoc_insertion_point(field_list:in_game.State.elements)
  return elements_;
}

// bool turn = 2;
inline void State::clear_turn() {
  turn_ = false;
}
inline bool State::_internal_turn() const {
  return turn_;
}
inline bool State::turn() const {
  // @@protoc_insertion_point(field_get:in_game.State.turn)
  return _internal_turn();
}
inline void State::_internal_set_turn(bool value) {
  
  turn_ = value;
}
inline void State::set_turn(bool value) {
  _internal_set_turn(value);
  // @@protoc_insertion_point(field_set:in_game.State.turn)
}

// bool finished = 3;
inline void State::clear_finished() {
  finished_ = false;
}
inline bool State::_internal_finished() const {
  return finished_;
}
inline bool State::finished() const {
  // @@protoc_insertion_point(field_get:in_game.State.finished)
  return _internal_finished();
}
inline void State::_internal_set_finished(bool value) {
  
  finished_ = value;
}
inline void State::set_finished(bool value) {
  _internal_set_finished(value);
  // @@protoc_insertion_point(field_set:in_game.State.finished)
}

// -------------------------------------------------------------------

// Result

// .in_game.Result.Tieds result = 1;
inline void Result::clear_result() {
  result_ = 0;
}
inline ::in_game::Result_Tieds Result::_internal_result() const {
  return static_cast< ::in_game::Result_Tieds >(result_);
}
inline ::in_game::Result_Tieds Result::result() const {
  // @@protoc_insertion_point(field_get:in_game.Result.result)
  return _internal_result();
}
inline void Result::_internal_set_result(::in_game::Result_Tieds value) {
  
  result_ = value;
}
inline void Result::set_result(::in_game::Result_Tieds value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:in_game.Result.result)
}

// .in_game.Result.Winner winner = 2;
inline void Result::clear_winner() {
  winner_ = 0;
}
inline ::in_game::Result_Winner Result::_internal_winner() const {
  return static_cast< ::in_game::Result_Winner >(winner_);
}
inline ::in_game::Result_Winner Result::winner() const {
  // @@protoc_insertion_point(field_get:in_game.Result.winner)
  return _internal_winner();
}
inline void Result::_internal_set_winner(::in_game::Result_Winner value) {
  
  winner_ = value;
}
inline void Result::set_winner(::in_game::Result_Winner value) {
  _internal_set_winner(value);
  // @@protoc_insertion_point(field_set:in_game.Result.winner)
}

// string username = 3;
inline void Result::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Result::username() const {
  // @@protoc_insertion_point(field_get:in_game.Result.username)
  return _internal_username();
}
inline void Result::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:in_game.Result.username)
}
inline std::string* Result::mutable_username() {
  // @@protoc_insertion_point(field_mutable:in_game.Result.username)
  return _internal_mutable_username();
}
inline const std::string& Result::_internal_username() const {
  return username_.GetNoArena();
}
inline void Result::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Result::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:in_game.Result.username)
}
inline void Result::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:in_game.Result.username)
}
inline void Result::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:in_game.Result.username)
}
inline std::string* Result::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Result::release_username() {
  // @@protoc_insertion_point(field_release:in_game.Result.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Result::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:in_game.Result.username)
}

// -------------------------------------------------------------------

// Exit

// .in_game.Player player = 1;
inline bool Exit::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool Exit::has_player() const {
  return _internal_has_player();
}
inline void Exit::clear_player() {
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
inline const ::in_game::Player& Exit::_internal_player() const {
  const ::in_game::Player* p = player_;
  return p != nullptr ? *p : *reinterpret_cast<const ::in_game::Player*>(
      &::in_game::_Player_default_instance_);
}
inline const ::in_game::Player& Exit::player() const {
  // @@protoc_insertion_point(field_get:in_game.Exit.player)
  return _internal_player();
}
inline ::in_game::Player* Exit::release_player() {
  // @@protoc_insertion_point(field_release:in_game.Exit.player)
  
  ::in_game::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::in_game::Player* Exit::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::in_game::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  return player_;
}
inline ::in_game::Player* Exit::mutable_player() {
  // @@protoc_insertion_point(field_mutable:in_game.Exit.player)
  return _internal_mutable_player();
}
inline void Exit::set_allocated_player(::in_game::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:in_game.Exit.player)
}

// -------------------------------------------------------------------

// ExitAlert

// string message = 1;
inline void ExitAlert::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ExitAlert::message() const {
  // @@protoc_insertion_point(field_get:in_game.ExitAlert.message)
  return _internal_message();
}
inline void ExitAlert::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:in_game.ExitAlert.message)
}
inline std::string* ExitAlert::mutable_message() {
  // @@protoc_insertion_point(field_mutable:in_game.ExitAlert.message)
  return _internal_mutable_message();
}
inline const std::string& ExitAlert::_internal_message() const {
  return message_.GetNoArena();
}
inline void ExitAlert::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ExitAlert::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:in_game.ExitAlert.message)
}
inline void ExitAlert::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:in_game.ExitAlert.message)
}
inline void ExitAlert::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:in_game.ExitAlert.message)
}
inline std::string* ExitAlert::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ExitAlert::release_message() {
  // @@protoc_insertion_point(field_release:in_game.ExitAlert.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ExitAlert::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:in_game.ExitAlert.message)
}

// .in_game.Player player = 2;
inline bool ExitAlert::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool ExitAlert::has_player() const {
  return _internal_has_player();
}
inline void ExitAlert::clear_player() {
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
inline const ::in_game::Player& ExitAlert::_internal_player() const {
  const ::in_game::Player* p = player_;
  return p != nullptr ? *p : *reinterpret_cast<const ::in_game::Player*>(
      &::in_game::_Player_default_instance_);
}
inline const ::in_game::Player& ExitAlert::player() const {
  // @@protoc_insertion_point(field_get:in_game.ExitAlert.player)
  return _internal_player();
}
inline ::in_game::Player* ExitAlert::release_player() {
  // @@protoc_insertion_point(field_release:in_game.ExitAlert.player)
  
  ::in_game::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::in_game::Player* ExitAlert::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::in_game::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  return player_;
}
inline ::in_game::Player* ExitAlert::mutable_player() {
  // @@protoc_insertion_point(field_mutable:in_game.ExitAlert.player)
  return _internal_mutable_player();
}
inline void ExitAlert::set_allocated_player(::in_game::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:in_game.ExitAlert.player)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace in_game

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::in_game::Position_ValueType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::in_game::Position_ValueType>() {
  return ::in_game::Position_ValueType_descriptor();
}
template <> struct is_proto_enum< ::in_game::Result_Tieds> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::in_game::Result_Tieds>() {
  return ::in_game::Result_Tieds_descriptor();
}
template <> struct is_proto_enum< ::in_game::Result_Winner> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::in_game::Result_Winner>() {
  return ::in_game::Result_Winner_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_in_5fgame_2eproto
