// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_database.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_5fdatabase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_5fdatabase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_5fdatabase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_5fdatabase_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_5fdatabase_2eproto;
namespace server_db {
class Game;
class GameDefaultTypeInternal;
extern GameDefaultTypeInternal _Game_default_instance_;
class GameResponse;
class GameResponseDefaultTypeInternal;
extern GameResponseDefaultTypeInternal _GameResponse_default_instance_;
class Player;
class PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
class PlayerResponse;
class PlayerResponseDefaultTypeInternal;
extern PlayerResponseDefaultTypeInternal _PlayerResponse_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
}  // namespace server_db
PROTOBUF_NAMESPACE_OPEN
template<> ::server_db::Game* Arena::CreateMaybeMessage<::server_db::Game>(Arena*);
template<> ::server_db::GameResponse* Arena::CreateMaybeMessage<::server_db::GameResponse>(Arena*);
template<> ::server_db::Player* Arena::CreateMaybeMessage<::server_db::Player>(Arena*);
template<> ::server_db::PlayerResponse* Arena::CreateMaybeMessage<::server_db::PlayerResponse>(Arena*);
template<> ::server_db::Request* Arena::CreateMaybeMessage<::server_db::Request>(Arena*);
template<> ::server_db::Response* Arena::CreateMaybeMessage<::server_db::Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace server_db {

enum Game_Result : int {
  Game_Result_TIED = 0,
  Game_Result_HAS_WINNER = 1,
  Game_Result_Game_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Game_Result_Game_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Game_Result_IsValid(int value);
constexpr Game_Result Game_Result_Result_MIN = Game_Result_TIED;
constexpr Game_Result Game_Result_Result_MAX = Game_Result_HAS_WINNER;
constexpr int Game_Result_Result_ARRAYSIZE = Game_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Game_Result_descriptor();
template<typename T>
inline const std::string& Game_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Game_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Game_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Game_Result_descriptor(), enum_t_value);
}
inline bool Game_Result_Parse(
    const std::string& name, Game_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Game_Result>(
    Game_Result_descriptor(), name, value);
}
enum Game_Winner : int {
  Game_Winner_PLAYER1 = 0,
  Game_Winner_PLAYER2 = 1,
  Game_Winner_Game_Winner_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Game_Winner_Game_Winner_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Game_Winner_IsValid(int value);
constexpr Game_Winner Game_Winner_Winner_MIN = Game_Winner_PLAYER1;
constexpr Game_Winner Game_Winner_Winner_MAX = Game_Winner_PLAYER2;
constexpr int Game_Winner_Winner_ARRAYSIZE = Game_Winner_Winner_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Game_Winner_descriptor();
template<typename T>
inline const std::string& Game_Winner_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Game_Winner>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Game_Winner_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Game_Winner_descriptor(), enum_t_value);
}
inline bool Game_Winner_Parse(
    const std::string& name, Game_Winner* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Game_Winner>(
    Game_Winner_descriptor(), name, value);
}
enum Request_Entity : int {
  Request_Entity_PLAYER = 0,
  Request_Entity_GAME = 1,
  Request_Entity_Request_Entity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Request_Entity_Request_Entity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Request_Entity_IsValid(int value);
constexpr Request_Entity Request_Entity_Entity_MIN = Request_Entity_PLAYER;
constexpr Request_Entity Request_Entity_Entity_MAX = Request_Entity_GAME;
constexpr int Request_Entity_Entity_ARRAYSIZE = Request_Entity_Entity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_Entity_descriptor();
template<typename T>
inline const std::string& Request_Entity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Request_Entity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Request_Entity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Request_Entity_descriptor(), enum_t_value);
}
inline bool Request_Entity_Parse(
    const std::string& name, Request_Entity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Request_Entity>(
    Request_Entity_descriptor(), name, value);
}
enum Request_Operation : int {
  Request_Operation_CREATE = 0,
  Request_Operation_RETRIEVE = 1,
  Request_Operation_UPDATE = 2,
  Request_Operation_DELETE = 3,
  Request_Operation_Request_Operation_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Request_Operation_Request_Operation_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Request_Operation_IsValid(int value);
constexpr Request_Operation Request_Operation_Operation_MIN = Request_Operation_CREATE;
constexpr Request_Operation Request_Operation_Operation_MAX = Request_Operation_DELETE;
constexpr int Request_Operation_Operation_ARRAYSIZE = Request_Operation_Operation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_Operation_descriptor();
template<typename T>
inline const std::string& Request_Operation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Request_Operation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Request_Operation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Request_Operation_descriptor(), enum_t_value);
}
inline bool Request_Operation_Parse(
    const std::string& name, Request_Operation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Request_Operation>(
    Request_Operation_descriptor(), name, value);
}
// ===================================================================

class Player :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_db.Player) */ {
 public:
  Player();
  virtual ~Player();

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return CreateMaybeMessage<Player>(nullptr);
  }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server_db.Player";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fdatabase_2eproto);
    return ::descriptor_table_server_5fdatabase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kIdFieldNumber = 1,
    kWinsFieldNumber = 4,
    kTiedsFieldNumber = 5,
    kLostFieldNumber = 6,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 3;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 wins = 4;
  void clear_wins();
  ::PROTOBUF_NAMESPACE_ID::uint32 wins() const;
  void set_wins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_wins() const;
  void _internal_set_wins(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 tieds = 5;
  void clear_tieds();
  ::PROTOBUF_NAMESPACE_ID::uint32 tieds() const;
  void set_tieds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tieds() const;
  void _internal_set_tieds(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 lost = 6;
  void clear_lost();
  ::PROTOBUF_NAMESPACE_ID::uint32 lost() const;
  void set_lost(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lost() const;
  void _internal_set_lost(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:server_db.Player)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 wins_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tieds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lost_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fdatabase_2eproto;
};
// -------------------------------------------------------------------

class Game :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_db.Game) */ {
 public:
  Game();
  virtual ~Game();

  Game(const Game& from);
  Game(Game&& from) noexcept
    : Game() {
    *this = ::std::move(from);
  }

  inline Game& operator=(const Game& from) {
    CopyFrom(from);
    return *this;
  }
  inline Game& operator=(Game&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Game& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Game* internal_default_instance() {
    return reinterpret_cast<const Game*>(
               &_Game_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Game& a, Game& b) {
    a.Swap(&b);
  }
  inline void Swap(Game* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Game* New() const final {
    return CreateMaybeMessage<Game>(nullptr);
  }

  Game* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Game>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Game& from);
  void MergeFrom(const Game& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Game* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server_db.Game";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fdatabase_2eproto);
    return ::descriptor_table_server_5fdatabase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Game_Result Result;
  static constexpr Result TIED =
    Game_Result_TIED;
  static constexpr Result HAS_WINNER =
    Game_Result_HAS_WINNER;
  static inline bool Result_IsValid(int value) {
    return Game_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    Game_Result_Result_MIN;
  static constexpr Result Result_MAX =
    Game_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    Game_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return Game_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return Game_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(const std::string& name,
      Result* value) {
    return Game_Result_Parse(name, value);
  }

  typedef Game_Winner Winner;
  static constexpr Winner PLAYER1 =
    Game_Winner_PLAYER1;
  static constexpr Winner PLAYER2 =
    Game_Winner_PLAYER2;
  static inline bool Winner_IsValid(int value) {
    return Game_Winner_IsValid(value);
  }
  static constexpr Winner Winner_MIN =
    Game_Winner_Winner_MIN;
  static constexpr Winner Winner_MAX =
    Game_Winner_Winner_MAX;
  static constexpr int Winner_ARRAYSIZE =
    Game_Winner_Winner_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Winner_descriptor() {
    return Game_Winner_descriptor();
  }
  template<typename T>
  static inline const std::string& Winner_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Winner>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Winner_Name.");
    return Game_Winner_Name(enum_t_value);
  }
  static inline bool Winner_Parse(const std::string& name,
      Winner* value) {
    return Game_Winner_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayer1FieldNumber = 2,
    kPlayer2FieldNumber = 3,
    kIdFieldNumber = 1,
    kResultFieldNumber = 4,
    kWinnerFieldNumber = 5,
  };
  // .server_db.Player player1 = 2;
  bool has_player1() const;
  private:
  bool _internal_has_player1() const;
  public:
  void clear_player1();
  const ::server_db::Player& player1() const;
  ::server_db::Player* release_player1();
  ::server_db::Player* mutable_player1();
  void set_allocated_player1(::server_db::Player* player1);
  private:
  const ::server_db::Player& _internal_player1() const;
  ::server_db::Player* _internal_mutable_player1();
  public:

  // .server_db.Player player2 = 3;
  bool has_player2() const;
  private:
  bool _internal_has_player2() const;
  public:
  void clear_player2();
  const ::server_db::Player& player2() const;
  ::server_db::Player* release_player2();
  ::server_db::Player* mutable_player2();
  void set_allocated_player2(::server_db::Player* player2);
  private:
  const ::server_db::Player& _internal_player2() const;
  ::server_db::Player* _internal_mutable_player2();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .server_db.Game.Result result = 4;
  void clear_result();
  ::server_db::Game_Result result() const;
  void set_result(::server_db::Game_Result value);
  private:
  ::server_db::Game_Result _internal_result() const;
  void _internal_set_result(::server_db::Game_Result value);
  public:

  // .server_db.Game.Winner winner = 5;
  void clear_winner();
  ::server_db::Game_Winner winner() const;
  void set_winner(::server_db::Game_Winner value);
  private:
  ::server_db::Game_Winner _internal_winner() const;
  void _internal_set_winner(::server_db::Game_Winner value);
  public:

  // @@protoc_insertion_point(class_scope:server_db.Game)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::server_db::Player* player1_;
  ::server_db::Player* player2_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  int result_;
  int winner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fdatabase_2eproto;
};
// -------------------------------------------------------------------

class Request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_db.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server_db.Request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fdatabase_2eproto);
    return ::descriptor_table_server_5fdatabase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Request_Entity Entity;
  static constexpr Entity PLAYER =
    Request_Entity_PLAYER;
  static constexpr Entity GAME =
    Request_Entity_GAME;
  static inline bool Entity_IsValid(int value) {
    return Request_Entity_IsValid(value);
  }
  static constexpr Entity Entity_MIN =
    Request_Entity_Entity_MIN;
  static constexpr Entity Entity_MAX =
    Request_Entity_Entity_MAX;
  static constexpr int Entity_ARRAYSIZE =
    Request_Entity_Entity_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Entity_descriptor() {
    return Request_Entity_descriptor();
  }
  template<typename T>
  static inline const std::string& Entity_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Entity>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Entity_Name.");
    return Request_Entity_Name(enum_t_value);
  }
  static inline bool Entity_Parse(const std::string& name,
      Entity* value) {
    return Request_Entity_Parse(name, value);
  }

  typedef Request_Operation Operation;
  static constexpr Operation CREATE =
    Request_Operation_CREATE;
  static constexpr Operation RETRIEVE =
    Request_Operation_RETRIEVE;
  static constexpr Operation UPDATE =
    Request_Operation_UPDATE;
  static constexpr Operation DELETE =
    Request_Operation_DELETE;
  static inline bool Operation_IsValid(int value) {
    return Request_Operation_IsValid(value);
  }
  static constexpr Operation Operation_MIN =
    Request_Operation_Operation_MIN;
  static constexpr Operation Operation_MAX =
    Request_Operation_Operation_MAX;
  static constexpr int Operation_ARRAYSIZE =
    Request_Operation_Operation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Operation_descriptor() {
    return Request_Operation_descriptor();
  }
  template<typename T>
  static inline const std::string& Operation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operation_Name.");
    return Request_Operation_Name(enum_t_value);
  }
  static inline bool Operation_Parse(const std::string& name,
      Operation* value) {
    return Request_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 3,
    kGameFieldNumber = 4,
    kEntityFieldNumber = 1,
    kOperationFieldNumber = 2,
  };
  // .server_db.Player player = 3;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::server_db::Player& player() const;
  ::server_db::Player* release_player();
  ::server_db::Player* mutable_player();
  void set_allocated_player(::server_db::Player* player);
  private:
  const ::server_db::Player& _internal_player() const;
  ::server_db::Player* _internal_mutable_player();
  public:

  // .server_db.Game game = 4;
  bool has_game() const;
  private:
  bool _internal_has_game() const;
  public:
  void clear_game();
  const ::server_db::Game& game() const;
  ::server_db::Game* release_game();
  ::server_db::Game* mutable_game();
  void set_allocated_game(::server_db::Game* game);
  private:
  const ::server_db::Game& _internal_game() const;
  ::server_db::Game* _internal_mutable_game();
  public:

  // .server_db.Request.Entity entity = 1;
  void clear_entity();
  ::server_db::Request_Entity entity() const;
  void set_entity(::server_db::Request_Entity value);
  private:
  ::server_db::Request_Entity _internal_entity() const;
  void _internal_set_entity(::server_db::Request_Entity value);
  public:

  // .server_db.Request.Operation operation = 2;
  void clear_operation();
  ::server_db::Request_Operation operation() const;
  void set_operation(::server_db::Request_Operation value);
  private:
  ::server_db::Request_Operation _internal_operation() const;
  void _internal_set_operation(::server_db::Request_Operation value);
  public:

  // @@protoc_insertion_point(class_scope:server_db.Request)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::server_db::Player* player_;
  ::server_db::Game* game_;
  int entity_;
  int operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fdatabase_2eproto;
};
// -------------------------------------------------------------------

class Response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_db.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server_db.Response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fdatabase_2eproto);
    return ::descriptor_table_server_5fdatabase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStatusCodeFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int32 status_code = 1;
  void clear_status_code();
  ::PROTOBUF_NAMESPACE_ID::int32 status_code() const;
  void set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status_code() const;
  void _internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:server_db.Response)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fdatabase_2eproto;
};
// -------------------------------------------------------------------

class PlayerResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_db.PlayerResponse) */ {
 public:
  PlayerResponse();
  virtual ~PlayerResponse();

  PlayerResponse(const PlayerResponse& from);
  PlayerResponse(PlayerResponse&& from) noexcept
    : PlayerResponse() {
    *this = ::std::move(from);
  }

  inline PlayerResponse& operator=(const PlayerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerResponse& operator=(PlayerResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerResponse* internal_default_instance() {
    return reinterpret_cast<const PlayerResponse*>(
               &_PlayerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PlayerResponse& a, PlayerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerResponse* New() const final {
    return CreateMaybeMessage<PlayerResponse>(nullptr);
  }

  PlayerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerResponse& from);
  void MergeFrom(const PlayerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server_db.PlayerResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fdatabase_2eproto);
    return ::descriptor_table_server_5fdatabase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .server_db.Player player = 2;
  int player_size() const;
  private:
  int _internal_player_size() const;
  public:
  void clear_player();
  ::server_db::Player* mutable_player(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server_db::Player >*
      mutable_player();
  private:
  const ::server_db::Player& _internal_player(int index) const;
  ::server_db::Player* _internal_add_player();
  public:
  const ::server_db::Player& player(int index) const;
  ::server_db::Player* add_player();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server_db::Player >&
      player() const;

  // .server_db.Response status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::server_db::Response& status() const;
  ::server_db::Response* release_status();
  ::server_db::Response* mutable_status();
  void set_allocated_status(::server_db::Response* status);
  private:
  const ::server_db::Response& _internal_status() const;
  ::server_db::Response* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:server_db.PlayerResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server_db::Player > player_;
  ::server_db::Response* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fdatabase_2eproto;
};
// -------------------------------------------------------------------

class GameResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:server_db.GameResponse) */ {
 public:
  GameResponse();
  virtual ~GameResponse();

  GameResponse(const GameResponse& from);
  GameResponse(GameResponse&& from) noexcept
    : GameResponse() {
    *this = ::std::move(from);
  }

  inline GameResponse& operator=(const GameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameResponse& operator=(GameResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameResponse* internal_default_instance() {
    return reinterpret_cast<const GameResponse*>(
               &_GameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GameResponse& a, GameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GameResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameResponse* New() const final {
    return CreateMaybeMessage<GameResponse>(nullptr);
  }

  GameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameResponse& from);
  void MergeFrom(const GameResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "server_db.GameResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_server_5fdatabase_2eproto);
    return ::descriptor_table_server_5fdatabase_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .server_db.Game game = 2;
  int game_size() const;
  private:
  int _internal_game_size() const;
  public:
  void clear_game();
  ::server_db::Game* mutable_game(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server_db::Game >*
      mutable_game();
  private:
  const ::server_db::Game& _internal_game(int index) const;
  ::server_db::Game* _internal_add_game();
  public:
  const ::server_db::Game& game(int index) const;
  ::server_db::Game* add_game();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server_db::Game >&
      game() const;

  // .server_db.Response status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::server_db::Response& status() const;
  ::server_db::Response* release_status();
  ::server_db::Response* mutable_status();
  void set_allocated_status(::server_db::Response* status);
  private:
  const ::server_db::Response& _internal_status() const;
  ::server_db::Response* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:server_db.GameResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server_db::Game > game_;
  ::server_db::Response* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_server_5fdatabase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Player

// uint64 id = 1;
inline void Player::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Player::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Player::id() const {
  // @@protoc_insertion_point(field_get:server_db.Player.id)
  return _internal_id();
}
inline void Player::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Player::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:server_db.Player.id)
}

// string username = 2;
inline void Player::clear_username() {
  username_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Player::username() const {
  // @@protoc_insertion_point(field_get:server_db.Player.username)
  return _internal_username();
}
inline void Player::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:server_db.Player.username)
}
inline std::string* Player::mutable_username() {
  // @@protoc_insertion_point(field_mutable:server_db.Player.username)
  return _internal_mutable_username();
}
inline const std::string& Player::_internal_username() const {
  return username_.GetNoArena();
}
inline void Player::_internal_set_username(const std::string& value) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Player::set_username(std::string&& value) {
  
  username_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server_db.Player.username)
}
inline void Player::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server_db.Player.username)
}
inline void Player::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server_db.Player.username)
}
inline std::string* Player::_internal_mutable_username() {
  
  return username_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Player::release_username() {
  // @@protoc_insertion_point(field_release:server_db.Player.username)
  
  return username_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:server_db.Player.username)
}

// string password = 3;
inline void Player::clear_password() {
  password_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Player::password() const {
  // @@protoc_insertion_point(field_get:server_db.Player.password)
  return _internal_password();
}
inline void Player::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:server_db.Player.password)
}
inline std::string* Player::mutable_password() {
  // @@protoc_insertion_point(field_mutable:server_db.Player.password)
  return _internal_mutable_password();
}
inline const std::string& Player::_internal_password() const {
  return password_.GetNoArena();
}
inline void Player::_internal_set_password(const std::string& value) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Player::set_password(std::string&& value) {
  
  password_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server_db.Player.password)
}
inline void Player::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server_db.Player.password)
}
inline void Player::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server_db.Player.password)
}
inline std::string* Player::_internal_mutable_password() {
  
  return password_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Player::release_password() {
  // @@protoc_insertion_point(field_release:server_db.Player.password)
  
  return password_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Player::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:server_db.Player.password)
}

// uint32 wins = 4;
inline void Player::clear_wins() {
  wins_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Player::_internal_wins() const {
  return wins_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Player::wins() const {
  // @@protoc_insertion_point(field_get:server_db.Player.wins)
  return _internal_wins();
}
inline void Player::_internal_set_wins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  wins_ = value;
}
inline void Player::set_wins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_wins(value);
  // @@protoc_insertion_point(field_set:server_db.Player.wins)
}

// uint32 tieds = 5;
inline void Player::clear_tieds() {
  tieds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Player::_internal_tieds() const {
  return tieds_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Player::tieds() const {
  // @@protoc_insertion_point(field_get:server_db.Player.tieds)
  return _internal_tieds();
}
inline void Player::_internal_set_tieds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  tieds_ = value;
}
inline void Player::set_tieds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tieds(value);
  // @@protoc_insertion_point(field_set:server_db.Player.tieds)
}

// uint32 lost = 6;
inline void Player::clear_lost() {
  lost_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Player::_internal_lost() const {
  return lost_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Player::lost() const {
  // @@protoc_insertion_point(field_get:server_db.Player.lost)
  return _internal_lost();
}
inline void Player::_internal_set_lost(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  lost_ = value;
}
inline void Player::set_lost(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lost(value);
  // @@protoc_insertion_point(field_set:server_db.Player.lost)
}

// -------------------------------------------------------------------

// Game

// uint64 id = 1;
inline void Game::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Game::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Game::id() const {
  // @@protoc_insertion_point(field_get:server_db.Game.id)
  return _internal_id();
}
inline void Game::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Game::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:server_db.Game.id)
}

// .server_db.Player player1 = 2;
inline bool Game::_internal_has_player1() const {
  return this != internal_default_instance() && player1_ != nullptr;
}
inline bool Game::has_player1() const {
  return _internal_has_player1();
}
inline void Game::clear_player1() {
  if (GetArenaNoVirtual() == nullptr && player1_ != nullptr) {
    delete player1_;
  }
  player1_ = nullptr;
}
inline const ::server_db::Player& Game::_internal_player1() const {
  const ::server_db::Player* p = player1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::server_db::Player*>(
      &::server_db::_Player_default_instance_);
}
inline const ::server_db::Player& Game::player1() const {
  // @@protoc_insertion_point(field_get:server_db.Game.player1)
  return _internal_player1();
}
inline ::server_db::Player* Game::release_player1() {
  // @@protoc_insertion_point(field_release:server_db.Game.player1)
  
  ::server_db::Player* temp = player1_;
  player1_ = nullptr;
  return temp;
}
inline ::server_db::Player* Game::_internal_mutable_player1() {
  
  if (player1_ == nullptr) {
    auto* p = CreateMaybeMessage<::server_db::Player>(GetArenaNoVirtual());
    player1_ = p;
  }
  return player1_;
}
inline ::server_db::Player* Game::mutable_player1() {
  // @@protoc_insertion_point(field_mutable:server_db.Game.player1)
  return _internal_mutable_player1();
}
inline void Game::set_allocated_player1(::server_db::Player* player1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete player1_;
  }
  if (player1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player1, submessage_arena);
    }
    
  } else {
    
  }
  player1_ = player1;
  // @@protoc_insertion_point(field_set_allocated:server_db.Game.player1)
}

// .server_db.Player player2 = 3;
inline bool Game::_internal_has_player2() const {
  return this != internal_default_instance() && player2_ != nullptr;
}
inline bool Game::has_player2() const {
  return _internal_has_player2();
}
inline void Game::clear_player2() {
  if (GetArenaNoVirtual() == nullptr && player2_ != nullptr) {
    delete player2_;
  }
  player2_ = nullptr;
}
inline const ::server_db::Player& Game::_internal_player2() const {
  const ::server_db::Player* p = player2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::server_db::Player*>(
      &::server_db::_Player_default_instance_);
}
inline const ::server_db::Player& Game::player2() const {
  // @@protoc_insertion_point(field_get:server_db.Game.player2)
  return _internal_player2();
}
inline ::server_db::Player* Game::release_player2() {
  // @@protoc_insertion_point(field_release:server_db.Game.player2)
  
  ::server_db::Player* temp = player2_;
  player2_ = nullptr;
  return temp;
}
inline ::server_db::Player* Game::_internal_mutable_player2() {
  
  if (player2_ == nullptr) {
    auto* p = CreateMaybeMessage<::server_db::Player>(GetArenaNoVirtual());
    player2_ = p;
  }
  return player2_;
}
inline ::server_db::Player* Game::mutable_player2() {
  // @@protoc_insertion_point(field_mutable:server_db.Game.player2)
  return _internal_mutable_player2();
}
inline void Game::set_allocated_player2(::server_db::Player* player2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete player2_;
  }
  if (player2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player2, submessage_arena);
    }
    
  } else {
    
  }
  player2_ = player2;
  // @@protoc_insertion_point(field_set_allocated:server_db.Game.player2)
}

// .server_db.Game.Result result = 4;
inline void Game::clear_result() {
  result_ = 0;
}
inline ::server_db::Game_Result Game::_internal_result() const {
  return static_cast< ::server_db::Game_Result >(result_);
}
inline ::server_db::Game_Result Game::result() const {
  // @@protoc_insertion_point(field_get:server_db.Game.result)
  return _internal_result();
}
inline void Game::_internal_set_result(::server_db::Game_Result value) {
  
  result_ = value;
}
inline void Game::set_result(::server_db::Game_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:server_db.Game.result)
}

// .server_db.Game.Winner winner = 5;
inline void Game::clear_winner() {
  winner_ = 0;
}
inline ::server_db::Game_Winner Game::_internal_winner() const {
  return static_cast< ::server_db::Game_Winner >(winner_);
}
inline ::server_db::Game_Winner Game::winner() const {
  // @@protoc_insertion_point(field_get:server_db.Game.winner)
  return _internal_winner();
}
inline void Game::_internal_set_winner(::server_db::Game_Winner value) {
  
  winner_ = value;
}
inline void Game::set_winner(::server_db::Game_Winner value) {
  _internal_set_winner(value);
  // @@protoc_insertion_point(field_set:server_db.Game.winner)
}

// -------------------------------------------------------------------

// Request

// .server_db.Request.Entity entity = 1;
inline void Request::clear_entity() {
  entity_ = 0;
}
inline ::server_db::Request_Entity Request::_internal_entity() const {
  return static_cast< ::server_db::Request_Entity >(entity_);
}
inline ::server_db::Request_Entity Request::entity() const {
  // @@protoc_insertion_point(field_get:server_db.Request.entity)
  return _internal_entity();
}
inline void Request::_internal_set_entity(::server_db::Request_Entity value) {
  
  entity_ = value;
}
inline void Request::set_entity(::server_db::Request_Entity value) {
  _internal_set_entity(value);
  // @@protoc_insertion_point(field_set:server_db.Request.entity)
}

// .server_db.Request.Operation operation = 2;
inline void Request::clear_operation() {
  operation_ = 0;
}
inline ::server_db::Request_Operation Request::_internal_operation() const {
  return static_cast< ::server_db::Request_Operation >(operation_);
}
inline ::server_db::Request_Operation Request::operation() const {
  // @@protoc_insertion_point(field_get:server_db.Request.operation)
  return _internal_operation();
}
inline void Request::_internal_set_operation(::server_db::Request_Operation value) {
  
  operation_ = value;
}
inline void Request::set_operation(::server_db::Request_Operation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:server_db.Request.operation)
}

// .server_db.Player player = 3;
inline bool Request::_internal_has_player() const {
  return this != internal_default_instance() && player_ != nullptr;
}
inline bool Request::has_player() const {
  return _internal_has_player();
}
inline void Request::clear_player() {
  if (GetArenaNoVirtual() == nullptr && player_ != nullptr) {
    delete player_;
  }
  player_ = nullptr;
}
inline const ::server_db::Player& Request::_internal_player() const {
  const ::server_db::Player* p = player_;
  return p != nullptr ? *p : *reinterpret_cast<const ::server_db::Player*>(
      &::server_db::_Player_default_instance_);
}
inline const ::server_db::Player& Request::player() const {
  // @@protoc_insertion_point(field_get:server_db.Request.player)
  return _internal_player();
}
inline ::server_db::Player* Request::release_player() {
  // @@protoc_insertion_point(field_release:server_db.Request.player)
  
  ::server_db::Player* temp = player_;
  player_ = nullptr;
  return temp;
}
inline ::server_db::Player* Request::_internal_mutable_player() {
  
  if (player_ == nullptr) {
    auto* p = CreateMaybeMessage<::server_db::Player>(GetArenaNoVirtual());
    player_ = p;
  }
  return player_;
}
inline ::server_db::Player* Request::mutable_player() {
  // @@protoc_insertion_point(field_mutable:server_db.Request.player)
  return _internal_mutable_player();
}
inline void Request::set_allocated_player(::server_db::Player* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  player_ = player;
  // @@protoc_insertion_point(field_set_allocated:server_db.Request.player)
}

// .server_db.Game game = 4;
inline bool Request::_internal_has_game() const {
  return this != internal_default_instance() && game_ != nullptr;
}
inline bool Request::has_game() const {
  return _internal_has_game();
}
inline void Request::clear_game() {
  if (GetArenaNoVirtual() == nullptr && game_ != nullptr) {
    delete game_;
  }
  game_ = nullptr;
}
inline const ::server_db::Game& Request::_internal_game() const {
  const ::server_db::Game* p = game_;
  return p != nullptr ? *p : *reinterpret_cast<const ::server_db::Game*>(
      &::server_db::_Game_default_instance_);
}
inline const ::server_db::Game& Request::game() const {
  // @@protoc_insertion_point(field_get:server_db.Request.game)
  return _internal_game();
}
inline ::server_db::Game* Request::release_game() {
  // @@protoc_insertion_point(field_release:server_db.Request.game)
  
  ::server_db::Game* temp = game_;
  game_ = nullptr;
  return temp;
}
inline ::server_db::Game* Request::_internal_mutable_game() {
  
  if (game_ == nullptr) {
    auto* p = CreateMaybeMessage<::server_db::Game>(GetArenaNoVirtual());
    game_ = p;
  }
  return game_;
}
inline ::server_db::Game* Request::mutable_game() {
  // @@protoc_insertion_point(field_mutable:server_db.Request.game)
  return _internal_mutable_game();
}
inline void Request::set_allocated_game(::server_db::Game* game) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete game_;
  }
  if (game) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      game = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game, submessage_arena);
    }
    
  } else {
    
  }
  game_ = game;
  // @@protoc_insertion_point(field_set_allocated:server_db.Request.game)
}

// -------------------------------------------------------------------

// Response

// int32 status_code = 1;
inline void Response::clear_status_code() {
  status_code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::_internal_status_code() const {
  return status_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Response::status_code() const {
  // @@protoc_insertion_point(field_get:server_db.Response.status_code)
  return _internal_status_code();
}
inline void Response::_internal_set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_code_ = value;
}
inline void Response::set_status_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:server_db.Response.status_code)
}

// string message = 2;
inline void Response::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Response::message() const {
  // @@protoc_insertion_point(field_get:server_db.Response.message)
  return _internal_message();
}
inline void Response::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:server_db.Response.message)
}
inline std::string* Response::mutable_message() {
  // @@protoc_insertion_point(field_mutable:server_db.Response.message)
  return _internal_mutable_message();
}
inline const std::string& Response::_internal_message() const {
  return message_.GetNoArena();
}
inline void Response::_internal_set_message(const std::string& value) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Response::set_message(std::string&& value) {
  
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:server_db.Response.message)
}
inline void Response::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:server_db.Response.message)
}
inline void Response::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:server_db.Response.message)
}
inline std::string* Response::_internal_mutable_message() {
  
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Response::release_message() {
  // @@protoc_insertion_point(field_release:server_db.Response.message)
  
  return message_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:server_db.Response.message)
}

// -------------------------------------------------------------------

// PlayerResponse

// .server_db.Response status = 1;
inline bool PlayerResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool PlayerResponse::has_status() const {
  return _internal_has_status();
}
inline void PlayerResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::server_db::Response& PlayerResponse::_internal_status() const {
  const ::server_db::Response* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::server_db::Response*>(
      &::server_db::_Response_default_instance_);
}
inline const ::server_db::Response& PlayerResponse::status() const {
  // @@protoc_insertion_point(field_get:server_db.PlayerResponse.status)
  return _internal_status();
}
inline ::server_db::Response* PlayerResponse::release_status() {
  // @@protoc_insertion_point(field_release:server_db.PlayerResponse.status)
  
  ::server_db::Response* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::server_db::Response* PlayerResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::server_db::Response>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::server_db::Response* PlayerResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:server_db.PlayerResponse.status)
  return _internal_mutable_status();
}
inline void PlayerResponse::set_allocated_status(::server_db::Response* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:server_db.PlayerResponse.status)
}

// repeated .server_db.Player player = 2;
inline int PlayerResponse::_internal_player_size() const {
  return player_.size();
}
inline int PlayerResponse::player_size() const {
  return _internal_player_size();
}
inline void PlayerResponse::clear_player() {
  player_.Clear();
}
inline ::server_db::Player* PlayerResponse::mutable_player(int index) {
  // @@protoc_insertion_point(field_mutable:server_db.PlayerResponse.player)
  return player_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server_db::Player >*
PlayerResponse::mutable_player() {
  // @@protoc_insertion_point(field_mutable_list:server_db.PlayerResponse.player)
  return &player_;
}
inline const ::server_db::Player& PlayerResponse::_internal_player(int index) const {
  return player_.Get(index);
}
inline const ::server_db::Player& PlayerResponse::player(int index) const {
  // @@protoc_insertion_point(field_get:server_db.PlayerResponse.player)
  return _internal_player(index);
}
inline ::server_db::Player* PlayerResponse::_internal_add_player() {
  return player_.Add();
}
inline ::server_db::Player* PlayerResponse::add_player() {
  // @@protoc_insertion_point(field_add:server_db.PlayerResponse.player)
  return _internal_add_player();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server_db::Player >&
PlayerResponse::player() const {
  // @@protoc_insertion_point(field_list:server_db.PlayerResponse.player)
  return player_;
}

// -------------------------------------------------------------------

// GameResponse

// .server_db.Response status = 1;
inline bool GameResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool GameResponse::has_status() const {
  return _internal_has_status();
}
inline void GameResponse::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::server_db::Response& GameResponse::_internal_status() const {
  const ::server_db::Response* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::server_db::Response*>(
      &::server_db::_Response_default_instance_);
}
inline const ::server_db::Response& GameResponse::status() const {
  // @@protoc_insertion_point(field_get:server_db.GameResponse.status)
  return _internal_status();
}
inline ::server_db::Response* GameResponse::release_status() {
  // @@protoc_insertion_point(field_release:server_db.GameResponse.status)
  
  ::server_db::Response* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::server_db::Response* GameResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::server_db::Response>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::server_db::Response* GameResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:server_db.GameResponse.status)
  return _internal_mutable_status();
}
inline void GameResponse::set_allocated_status(::server_db::Response* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:server_db.GameResponse.status)
}

// repeated .server_db.Game game = 2;
inline int GameResponse::_internal_game_size() const {
  return game_.size();
}
inline int GameResponse::game_size() const {
  return _internal_game_size();
}
inline void GameResponse::clear_game() {
  game_.Clear();
}
inline ::server_db::Game* GameResponse::mutable_game(int index) {
  // @@protoc_insertion_point(field_mutable:server_db.GameResponse.game)
  return game_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server_db::Game >*
GameResponse::mutable_game() {
  // @@protoc_insertion_point(field_mutable_list:server_db.GameResponse.game)
  return &game_;
}
inline const ::server_db::Game& GameResponse::_internal_game(int index) const {
  return game_.Get(index);
}
inline const ::server_db::Game& GameResponse::game(int index) const {
  // @@protoc_insertion_point(field_get:server_db.GameResponse.game)
  return _internal_game(index);
}
inline ::server_db::Game* GameResponse::_internal_add_game() {
  return game_.Add();
}
inline ::server_db::Game* GameResponse::add_game() {
  // @@protoc_insertion_point(field_add:server_db.GameResponse.game)
  return _internal_add_game();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::server_db::Game >&
GameResponse::game() const {
  // @@protoc_insertion_point(field_list:server_db.GameResponse.game)
  return game_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace server_db

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::server_db::Game_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server_db::Game_Result>() {
  return ::server_db::Game_Result_descriptor();
}
template <> struct is_proto_enum< ::server_db::Game_Winner> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server_db::Game_Winner>() {
  return ::server_db::Game_Winner_descriptor();
}
template <> struct is_proto_enum< ::server_db::Request_Entity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server_db::Request_Entity>() {
  return ::server_db::Request_Entity_descriptor();
}
template <> struct is_proto_enum< ::server_db::Request_Operation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::server_db::Request_Operation>() {
  return ::server_db::Request_Operation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_5fdatabase_2eproto
